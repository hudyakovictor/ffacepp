"""
UIComponents - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-06-21
–ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É –¢–ó
"""

import os
os.makedirs("logs", exist_ok=True)

import gradio as gr
import numpy as np
import pandas as pd
import logging
from typing import Dict, List, Optional, Any, Tuple, Union, Callable
from pathlib import Path
import json
import time
import asyncio
from datetime import datetime, timedelta
import threading
from functools import lru_cache
from collections import OrderedDict, defaultdict
import hashlib

from core_config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
try:
    import plotly.graph_objects as go
    import plotly.express as px
    from plotly.subplots import make_subplots
    HAS_PLOTLY = True
    logger.info("‚úî Plotly –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤")
except ImportError as e:
    HAS_PLOTLY = False
    logger.warning(f"‚ùå Plotly –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –î–µ—Ç–∞–ª–∏: {e}")

try:
    from PIL import Image
    HAS_PIL = True
    logger.info("‚úî PIL –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
except ImportError as e:
    HAS_PIL = False
    logger.warning(f"‚ùå PIL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –î–µ—Ç–∞–ª–∏: {e}")

# === –ö–û–ù–°–¢–ê–ù–¢–´ UI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

# –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –ü—É—Ç–∏–Ω–∞
PUTIN_BIRTH_DATE = datetime(1952, 10, 7)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã UI
UI_PARAMS = {
    "max_3d_points": 50000,
    "heatmap_zones": 7,
    "timeline_max_points": 1000,
    "gallery_columns": 3,
    "gallery_rows": 2,
    "preview_size": (200, 200),
    "thumbnail_size": (150, 150)
}

# –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
UI_COLOR_SCHEMES = {
    "authenticity": {
        "high": "#28a745",      # –ó–µ–ª–µ–Ω—ã–π > 0.7
        "medium": "#ffc107",    # –ñ–µ–ª—Ç—ã–π 0.3-0.7
        "low": "#dc3545"        # –ö—Ä–∞—Å–Ω—ã–π < 0.3
    },
    "mask_levels": {
        "Level1": "#8B0000",
        "Level2": "#FF4500", 
        "Level3": "#FFD700",
        "Level4": "#32CD32",
        "Level5": "#006400"
    },
    "anomaly_types": {
        "geometric": "#FF0000",
        "texture": "#FFA500",
        "temporal": "#0000FF",
        "embedding": "#800080",
        "medical": "#008000"
    }
}

# === –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° ===

class BaseUIComponent:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –µ–¥–∏–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """

    def __init__(self, component_id: str):
        self.component_id = component_id
        self.state = {}
        self.config = get_config()
        self.component_lock = threading.Lock()
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {component_id}")

    def render(self) -> gr.Component:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ render –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ")

    def update_state(self, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            with self.component_lock:
                self.state.update(kwargs)
            logger.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {self.component_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {kwargs}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.component_id}: {e}")

    def get_state(self, key: str, default=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            with self.component_lock:
                return self.state.get(key, default)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.component_id}.{key}: {e}")
            return default

    def clear_state(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        try:
            with self.component_lock:
                self.state.clear()
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {self.component_id} –æ—á–∏—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è {self.component_id}: {e}")

# === 3D VIEWER ===

class Interactive3DViewer(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Å landmarks –∏ dense points
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: 68 landmarks, wireframe, dense surface points
    """

    def __init__(self):
        super().__init__("3d_viewer")
        self.current_landmarks = None
        self.current_dense_points = None
        self.max_points = UI_PARAMS["max_3d_points"]

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        try:
            with gr.Column() as col:
                gr.Markdown("### üéØ 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Ü–∞")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: 3D –º–æ–¥–µ–ª—å —Å –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏
                self.model_3d = gr.Model3D(
                    label="3D –º–æ–¥–µ–ª—å –ª–∏—Ü–∞",
                    height=500,
                    interactive=True,
                    camera_position=(0, 0, 5)
                )
                
                with gr.Row():
                    self.wireframe_toggle = gr.Checkbox(
                        label="Wireframe —Ä–µ–∂–∏–º",
                        value=True,
                        info="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä–∫–∞—Å –ª–∏—Ü–∞"
                    )
                    
                    self.dense_points_toggle = gr.Checkbox(
                        label="–ü–ª–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ (38,000)",
                        value=False,
                        info="–ü–æ–∫–∞–∑–∞—Ç—å dense surface points"
                    )
                    
                    self.landmarks_toggle = gr.Checkbox(
                        label="68 –ª–∞–Ω–¥–º–∞—Ä–æ–∫",
                        value=True,
                        info="–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏"
                    )
                
                with gr.Row():
                    self.point_size = gr.Slider(
                        minimum=1,
                        maximum=10,
                        value=3,
                        label="–†–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫",
                        info="–†–∞–∑–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ç–æ—á–µ–∫"
                    )
                    
                    self.opacity = gr.Slider(
                        minimum=0.1,
                        maximum=1.0,
                        value=0.8,
                        label="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å",
                        info="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏"
                    )
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
                self.info_panel = gr.HTML(
                    value=self._create_info_html(),
                    label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"
                )
                
                # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
                for control in [self.wireframe_toggle, self.dense_points_toggle, 
                               self.landmarks_toggle, self.point_size, self.opacity]:
                    control.change(
                        fn=self.update_3d_view,
                        inputs=[self.wireframe_toggle, self.dense_points_toggle, 
                               self.landmarks_toggle, self.point_size, self.opacity],
                        outputs=[self.model_3d, self.info_panel]
                    )
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
            return gr.Column()

    def create_3d_model_from_landmarks(self, landmarks_3d: np.ndarray, 
                                     dense_points: Optional[np.ndarray] = None) -> str:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ 3D –º–æ–¥–µ–ª–∏ –∏–∑ –ª–∞–Ω–¥–º–∞—Ä–æ–∫
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 68 landmarks + dense points
        """
        try:
            if landmarks_3d is None or not hasattr(landmarks_3d, 'size') or landmarks_3d.size == 0:
                logger.warning("–õ–∞–Ω–¥–º–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã")
                return ""
            
            self.current_landmarks = landmarks_3d
            self.current_dense_points = dense_points
            
            obj_content = self._landmarks_to_obj(landmarks_3d, dense_points)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.update_state(
                landmarks_count=len(landmarks_3d),
                dense_points_count=len(dense_points) if dense_points is not None else 0,
                last_update=datetime.now().isoformat()
            )
            
            return obj_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 3D –º–æ–¥–µ–ª–∏: {e}")
            return ""

    def _landmarks_to_obj(self, landmarks: np.ndarray, 
                         dense_points: Optional[np.ndarray] = None) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–∞–Ω–¥–º–∞—Ä–æ–∫ –≤ OBJ —Ñ–æ—Ä–º–∞—Ç"""
        try:
            obj_lines = ["# 3D Face Model Generated by UI Components"]
            obj_lines.append(f"# Landmarks: {len(landmarks)}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 68 –ª–∞–Ω–¥–º–∞—Ä–æ–∫
            for i, point in enumerate(landmarks):
                obj_lines.append(f"v {point[0]:.6f} {point[1]:.6f} {point[2]:.6f}")
                obj_lines.append(f"# landmark_{i}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ dense points –µ—Å–ª–∏ –µ—Å—Ç—å
            if dense_points is not None and len(dense_points) > 0:
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if len(dense_points) > self.max_points:
                    step = len(dense_points) // self.max_points
                    dense_points = dense_points[::step]
                
                obj_lines.append(f"# Dense points: {len(dense_points)}")
                for point in dense_points:
                    obj_lines.append(f"v {point[0]:.6f} {point[1]:.6f} {point[2]:.6f}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è wireframe (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            if len(landmarks) >= 68:
                obj_lines.extend(self._create_face_wireframe())
            
            return "\n".join(obj_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ OBJ: {e}")
            return ""

    def _create_face_wireframe(self) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ wireframe —Å–≤—è–∑–µ–π –¥–ª—è –ª–∏—Ü–∞"""
        try:
            wireframe_lines = []
            
            # –ö–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞ (0-16)
            for i in range(16):
                wireframe_lines.append(f"l {i+1} {i+2}")
            
            # –õ–µ–≤–∞—è –±—Ä–æ–≤—å (17-21)
            for i in range(17, 21):
                wireframe_lines.append(f"l {i+1} {i+2}")
            
            # –ü—Ä–∞–≤–∞—è –±—Ä–æ–≤—å (22-26)
            for i in range(22, 26):
                wireframe_lines.append(f"l {i+1} {i+2}")
            
            # –ù–æ—Å (27-35)
            for i in range(27, 35):
                wireframe_lines.append(f"l {i+1} {i+2}")
            
            # –ì–ª–∞–∑–∞ –∏ —Ä–æ—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            # –õ–µ–≤—ã–π –≥–ª–∞–∑ (36-41)
            for i in range(36, 41):
                wireframe_lines.append(f"l {i+1} {i+2}")
            wireframe_lines.append(f"l 42 37")  # –ó–∞–º—ã–∫–∞–Ω–∏–µ
            
            # –ü—Ä–∞–≤—ã–π –≥–ª–∞–∑ (42-47)
            for i in range(42, 47):
                wireframe_lines.append(f"l {i+1} {i+2}")
            wireframe_lines.append(f"l 48 43")  # –ó–∞–º—ã–∫–∞–Ω–∏–µ
            
            # –†–æ—Ç (48-67)
            for i in range(48, 67):
                wireframe_lines.append(f"l {i+1} {i+2}")
            wireframe_lines.append(f"l 68 49")  # –ó–∞–º—ã–∫–∞–Ω–∏–µ
            
            return wireframe_lines
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è wireframe: {e}")
            return []

    def update_3d_view(self, wireframe: bool, dense_points: bool, landmarks: bool,
                      point_size: int, opacity: float) -> Tuple[str, str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D –≤–∏–¥–∞"""
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D: wireframe={wireframe}, dense={dense_points}, "
                       f"landmarks={landmarks}, size={point_size}, opacity={opacity}")
            
            obj_content = "# 3D Face Model\n"
            
            if landmarks and self.current_landmarks is not None:
                obj_content += self._landmarks_to_obj(
                    self.current_landmarks,
                    self.current_dense_points if dense_points else None
                )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            info_html = self._create_info_html()
            
            return obj_content, info_html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 3D: {e}")
            return "", self._create_error_html(str(e))

    def _create_info_html(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        try:
            landmarks_count = self.get_state("landmarks_count", 0)
            dense_count = self.get_state("dense_points_count", 0)
            last_update = self.get_state("last_update", "–ù–∏–∫–æ–≥–¥–∞")
            
            html = f"""
            <div style="padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 3D –º–æ–¥–µ–ª–∏</h4>
                <p><strong>68 –ª–∞–Ω–¥–º–∞—Ä–æ–∫:</strong> {landmarks_count}</p>
                <p><strong>Dense points:</strong> {dense_count:,}</p>
                <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> {last_update}</p>
                <p><strong>–ú–∞–∫—Å–∏–º—É–º —Ç–æ—á–µ–∫:</strong> {self.max_points:,}</p>
            </div>
            """
            
            return html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è info HTML: {e}")
            return self._create_error_html(str(e))

    def _create_error_html(self, error_msg: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        return f"""
        <div style="padding: 10px; background-color: #ffebee; border-radius: 5px; color: #d32f2f;">
            <h4>–û—à–∏–±–∫–∞</h4>
            <p>{error_msg}</p>
        </div>
        """

# === INTERACTIVE HEATMAP ===

class InteractiveHeatmap(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: color-coding –ø–æ –∑–æ–Ω–∞–º –ª–∏—Ü–∞
    """

    def __init__(self):
        super().__init__("heatmap")
        self.zones_config = {
            "forehead": {"x": 0.5, "y": 0.2, "width": 0.6, "height": 0.2},
            "left_eye": {"x": 0.3, "y": 0.35, "width": 0.15, "height": 0.1},
            "right_eye": {"x": 0.7, "y": 0.35, "width": 0.15, "height": 0.1},
            "nose": {"x": 0.5, "y": 0.5, "width": 0.2, "height": 0.2},
            "mouth": {"x": 0.5, "y": 0.7, "width": 0.3, "height": 0.15},
            "left_cheek": {"x": 0.25, "y": 0.55, "width": 0.2, "height": 0.2},
            "right_cheek": {"x": 0.75, "y": 0.55, "width": 0.2, "height": 0.2}
        }

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
        try:
            with gr.Column() as col:
                gr.Markdown("### üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏")
                
                self.heatmap_image = gr.AnnotatedImage(
                    label="–ö–∞—Ä—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –∑–æ–Ω–∞–º",
                    height=400,
                    width=400
                )
                
                with gr.Row():
                    self.zone_selector = gr.Dropdown(
                        choices=list(self.zones_config.keys()),
                        label="–í—ã–±–æ—Ä –∑–æ–Ω—ã",
                        value="forehead"
                    )
                    
                    self.threshold_slider = gr.Slider(
                        minimum=0.0,
                        maximum=1.0,
                        value=0.5,
                        label="–ü–æ—Ä–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        info="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    )
                
                self.zone_details = gr.DataFrame(
                    headers=["–ó–æ–Ω–∞", "–ë–∞–ª–ª", "–°—Ç–∞—Ç—É—Å", "–¶–≤–µ—Ç"],
                    label="–î–µ—Ç–∞–ª–∏ –ø–æ –∑–æ–Ω–∞–º",
                    interactive=False
                )
                
                # –°–æ–±—ã—Ç–∏—è
                self.zone_selector.change(
                    fn=self.highlight_zone,
                    inputs=[self.zone_selector],
                    outputs=[self.heatmap_image]
                )
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ heatmap: {e}")
            return gr.Column()

    def create_authenticity_heatmap(self, image: np.ndarray, 
                                  authenticity_scores: Dict[str, float]) -> Tuple[Any, List[Dict]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: color-coding –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
        """
        try:
            if image is None or image.size == 0:
                logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è heatmap –ø—É—Å—Ç–æ–µ")
                return None, []
            
            annotations = []
            zone_data = []
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: Color-coding –ø–æ score
            for zone, score in authenticity_scores.items():
                if zone in self.zones_config:
                    color = self._score_to_color(score)
                    status = self._score_to_status(score)
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                    zone_config = self.zones_config[zone]
                    
                    annotations.append({
                        "label": f"{zone}: {score:.3f}",
                        "color": color,
                        "coordinates": self._zone_to_coordinates(zone_config, image.shape)
                    })
                    
                    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
                    zone_data.append([zone, f"{score:.3f}", status, color])
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.update_state(
                zones_processed=len(annotations),
                last_scores=authenticity_scores,
                last_update=datetime.now().isoformat()
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π
            self.zone_details.value = zone_data
            
            return image, annotations
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è heatmap: {e}")
            return image, []

    def _score_to_color(self, score: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è score –≤ —Ü–≤–µ—Ç"""
        try:
            colors = UI_COLOR_SCHEMES["authenticity"]
            
            if score >= 0.7:
                return colors["high"]      # –ó–µ–ª–µ–Ω—ã–π - –≤—ã—Å–æ–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å
            elif score >= 0.3:
                return colors["medium"]    # –ñ–µ–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω—è—è
            else:
                return colors["low"]       # –ö—Ä–∞—Å–Ω—ã–π - –Ω–∏–∑–∫–∞—è
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ score –≤ —Ü–≤–µ—Ç: {e}")
            return "#808080"  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _score_to_status(self, score: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è score –≤ —Å—Ç–∞—Ç—É—Å"""
        try:
            if score >= 0.7:
                return "–í–´–°–û–ö–ò–ô"
            elif score >= 0.3:
                return "–°–†–ï–î–ù–ò–ô"
            else:
                return "–ù–ò–ó–ö–ò–ô"
        except:
            return "–ù–ï–ò–ó–í–ï–°–¢–ù–û"

    def _zone_to_coordinates(self, zone_config: Dict[str, float], 
                           image_shape: Tuple[int, ...]) -> Tuple[int, int, int, int]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–æ–Ω—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
        try:
            height, width = image_shape[:2]
            
            x = zone_config["x"]
            y = zone_config["y"]
            w = zone_config["width"]
            h = zone_config["height"]
            
            x1 = int((x - w/2) * width)
            y1 = int((y - h/2) * height)
            x2 = int((x + w/2) * width)
            y2 = int((y + h/2) * height)
            
            return (x1, y1, x2, y2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–æ–Ω—ã: {e}")
            return (0, 0, 100, 100)

    def highlight_zone(self, selected_zone: str) -> Any:
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–æ–Ω—ã"""
        try:
            logger.info(f"–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–æ–Ω—ã: {selected_zone}")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω—ã
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
            
            return None  # –ó–∞–≥–ª—É—à–∫–∞
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∑–æ–Ω—ã: {e}")
            return None

# === TEMPORAL SLIDER ===

class TemporalSlider(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ timeline
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    """

    def __init__(self):
        super().__init__("temporal_slider")
        self.timeline_data = []
        self.current_position = 0

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞"""
        try:
            with gr.Column() as col:
                gr.Markdown("### ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è")
                
                self.slider = gr.Slider(
                    minimum=0,
                    maximum=100,
                    step=1,
                    value=0,
                    label="–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (%)",
                    interactive=True
                )
                
                with gr.Row():
                    self.date_display = gr.Textbox(
                        label="–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞",
                        interactive=False,
                        value="–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                    )
                    
                    self.age_display = gr.Textbox(
                        label="–í–æ–∑—Ä–∞—Å—Ç –ü—É—Ç–∏–Ω–∞",
                        interactive=False,
                        value="0.0 –ª–µ—Ç"
                    )
                
                with gr.Row():
                    self.preview = gr.Image(
                        label="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä",
                        height=200,
                        width=200
                    )
                    
                    self.info = gr.HTML(
                        value=self._create_timeline_info_html(),
                        label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ"
                    )
                
                # –ö–æ–Ω—Ç—Ä–æ–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                with gr.Row():
                    self.prev_btn = gr.Button("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∏–π", size="sm")
                    self.play_btn = gr.Button("‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", size="sm")
                    self.next_btn = gr.Button("‚ñ∂ –°–ª–µ–¥—É—é—â–∏–π", size="sm")
                    self.reset_btn = gr.Button("üîÑ –°–±—Ä–æ—Å", size="sm")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", open=False):
                    self.playback_speed = gr.Slider(
                        minimum=0.1,
                        maximum=5.0,
                        value=1.0,
                        label="–°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
                        info="–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏"
                    )
                    
                    self.auto_loop = gr.Checkbox(
                        label="–ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ",
                        value=False,
                        info="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
                    )
                
                # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
                self.slider.change(
                    fn=self.update_temporal_position,
                    inputs=[self.slider],
                    outputs=[self.date_display, self.age_display, self.preview, self.info]
                )
                
                self.prev_btn.click(
                    fn=self.previous_frame,
                    inputs=[],
                    outputs=[self.slider, self.date_display, self.age_display, self.preview, self.info]
                )
                
                self.next_btn.click(
                    fn=self.next_frame,
                    inputs=[],
                    outputs=[self.slider, self.date_display, self.age_display, self.preview, self.info]
                )
                
                self.reset_btn.click(
                    fn=self.reset_position,
                    inputs=[],
                    outputs=[self.slider, self.date_display, self.age_display, self.preview, self.info]
                )
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ temporal slider: {e}")
            return gr.Column()

    def load_timeline_data(self, timeline_data: List[Dict[str, Any]]):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏"""
        try:
            self.timeline_data = sorted(timeline_data, key=lambda x: x.get("date", ""))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ª–∞–π–¥–µ—Ä–∞
            if self.timeline_data:
                self.slider.maximum = len(self.timeline_data) - 1
            
            self.update_state(
                timeline_length=len(self.timeline_data),
                date_range=(
                    self.timeline_data[0].get("date", "") if self.timeline_data else "",
                    self.timeline_data[-1].get("date", "") if self.timeline_data else ""
                ),
                loaded_at=datetime.now().isoformat()
            )
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.timeline_data)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ timeline –¥–∞–Ω–Ω—ã—Ö: {e}")

    def update_temporal_position(self, position: float) -> Tuple[str, str, Any, str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.timeline_data:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "0.0 –ª–µ—Ç", None, self._create_timeline_info_html()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏–Ω–¥–µ–∫—Å
            index = int(position * (len(self.timeline_data) - 1) / 100) if len(self.timeline_data) > 1 else 0
            index = max(0, min(index, len(self.timeline_data) - 1))
            
            self.current_position = index
            current_data = self.timeline_data[index]
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            date_str = current_data.get("date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            image_path = current_data.get("image_path")
            
            # –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –ü—É—Ç–∏–Ω–∞
            try:
                if date_str != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                    current_date = datetime.strptime(date_str, "%Y-%m-%d").date()
                    age_years = (current_date - PUTIN_BIRTH_DATE.date()).days / 365.25
                    age_display = f"{age_years:.1f} –ª–µ—Ç"
                else:
                    age_display = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except:
                age_display = "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            preview_image = None
            if image_path and Path(image_path).exists():
                try:
                    if HAS_PIL:
                        preview_image = Image.open(image_path)
                        preview_image.thumbnail(UI_PARAMS["preview_size"])
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            info_html = self._create_timeline_info_html(current_data)
            
            return date_str, age_display, preview_image, info_html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return "–û—à–∏–±–∫–∞", "0.0 –ª–µ—Ç", None, self._create_error_info_html(str(e))

    def previous_frame(self) -> Tuple[float, str, str, Any, str]:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∫–∞–¥—Ä—É"""
        try:
            if self.current_position > 0:
                new_position = (self.current_position - 1) * 100 / max(1, len(self.timeline_data) - 1)
                return (new_position,) + self.update_temporal_position(new_position)
            else:
                return (0.0,) + self.update_temporal_position(0.0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∫–∞–¥—Ä—É: {e}")
            return 0.0, "–û—à–∏–±–∫–∞", "0.0 –ª–µ—Ç", None, self._create_error_info_html(str(e))

    def next_frame(self) -> Tuple[float, str, str, Any, str]:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–¥—Ä—É"""
        try:
            if self.current_position < len(self.timeline_data) - 1:
                new_position = (self.current_position + 1) * 100 / max(1, len(self.timeline_data) - 1)
                return (new_position,) + self.update_temporal_position(new_position)
            else:
                max_pos = 100.0
                return (max_pos,) + self.update_temporal_position(max_pos)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–¥—Ä—É: {e}")
            return 100.0, "–û—à–∏–±–∫–∞", "0.0 –ª–µ—Ç", None, self._create_error_info_html(str(e))

    def reset_position(self) -> Tuple[float, str, str, Any, str]:
        """–°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ"""
        try:
            self.current_position = 0
            return (0.0,) + self.update_temporal_position(0.0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0, "–û—à–∏–±–∫–∞", "0.0 –ª–µ—Ç", None, self._create_error_info_html(str(e))

    def _create_timeline_info_html(self, current_data: Optional[Dict[str, Any]] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        try:
            if current_data is None:
                return """
                <div style="padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
                    <h4>–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è</h4>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</p>
                </div>
                """
            
            authenticity_score = current_data.get("authenticity_score", 0.0)
            cluster_id = current_data.get("cluster_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            quality_score = current_data.get("quality_score", 0.0)
            
            html = f"""
            <div style="padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
                <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–¥—Ä–µ</h4>
                <p><strong>–î–∞—Ç–∞:</strong> {current_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</p>
                <p><strong>–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å:</strong> {authenticity_score:.3f}</p>
                <p><strong>–ö–ª–∞—Å—Ç–µ—Ä:</strong> {cluster_id}</p>
                <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> {quality_score:.3f}</p>
                <p><strong>–ü–æ–∑–∏—Ü–∏—è:</strong> {self.current_position + 1} –∏–∑ {len(self.timeline_data)}</p>
            </div>
            """
            
            return html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è timeline info HTML: {e}")
            return self._create_error_info_html(str(e))

    def _create_error_info_html(self, error_msg: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        return f"""
        <div style="padding: 15px; background-color: #ffebee; border-radius: 5px; color: #d32f2f;">
            <h4>–û—à–∏–±–∫–∞</h4>
            <p>{error_msg}</p>
        </div>
        """

# === METRICS GALLERY ===

class MetricsGallery(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–∞–ª–µ—Ä–µ—è –º–µ—Ç—Ä–∏–∫ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: 15 –º–µ—Ç—Ä–∏–∫ –≤ 3 –≥—Ä—É–ø–ø–∞—Ö
    """

    def __init__(self):
        super().__init__("metrics_gallery")
        self.metrics_groups = {
            "skull": [
                "skull_width_ratio", "temporal_bone_angle", "zygomatic_arch_width",
                "orbital_depth", "occipital_curve"
            ],
            "proportions": [
                "cephalic_index", "nasolabial_angle", "orbital_index",
                "forehead_height_ratio", "chin_projection_ratio"
            ],
            "bone_structure": [
                "interpupillary_distance_ratio", "gonial_angle_asymmetry",
                "zygomatic_angle", "jaw_angle_ratio", "mandibular_symphysis_angle"
            ]
        }

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥–∞–ª–µ—Ä–µ–∏ –º–µ—Ç—Ä–∏–∫"""
        try:
            with gr.Column() as col:
                gr.Markdown("### üìä –ì–∞–ª–µ—Ä–µ—è –º–µ—Ç—Ä–∏–∫ (15 –º–µ—Ç—Ä–∏–∫ –≤ 3 –≥—Ä—É–ø–ø–∞—Ö)")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: Tabs –¥–ª—è 3 –≥—Ä—É–ø–ø –º–µ—Ç—Ä–∏–∫
                with gr.Tabs():
                    with gr.Tab("üèõÔ∏è –ì–µ–æ–º–µ—Ç—Ä–∏—è —á–µ—Ä–µ–ø–∞ (5)"):
                        self.skull_metrics = gr.Gallery(
                            label="–ú–µ—Ç—Ä–∏–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —á–µ—Ä–µ–ø–∞",
                            columns=UI_PARAMS["gallery_columns"],
                            rows=UI_PARAMS["gallery_rows"],
                            height=300,
                            allow_preview=True
                        )
                        
                        self.skull_table = gr.DataFrame(
                            headers=["–ú–µ—Ç—Ä–∏–∫–∞", "–¢–µ–∫—É—â–µ–µ", "–≠—Ç–∞–ª–æ–Ω", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"],
                            label="–î–µ—Ç–∞–ª–∏ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–ø–∞",
                            interactive=False
                        )
                    
                    with gr.Tab("üë§ –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞ (5)"):
                        self.proportions_metrics = gr.Gallery(
                            label="–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ª–∏—Ü–∞",
                            columns=UI_PARAMS["gallery_columns"],
                            rows=UI_PARAMS["gallery_rows"],
                            height=300,
                            allow_preview=True
                        )
                        
                        self.proportions_table = gr.DataFrame(
                            headers=["–ú–µ—Ç—Ä–∏–∫–∞", "–¢–µ–∫—É—â–µ–µ", "–≠—Ç–∞–ª–æ–Ω", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"],
                            label="–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ª–∏—Ü–∞",
                            interactive=False
                        )
                    
                    with gr.Tab("ü¶¥ –ö–æ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (5)"):
                        self.bone_metrics = gr.Gallery(
                            label="–ú–µ—Ç—Ä–∏–∫–∏ –∫–æ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                            columns=UI_PARAMS["gallery_columns"],
                            rows=UI_PARAMS["gallery_rows"],
                            height=300,
                            allow_preview=True
                        )
                        
                        self.bone_table = gr.DataFrame(
                            headers=["–ú–µ—Ç—Ä–∏–∫–∞", "–¢–µ–∫—É—â–µ–µ", "–≠—Ç–∞–ª–æ–Ω", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"],
                            label="–î–µ—Ç–∞–ª–∏ –∫–æ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                            interactive=False
                        )
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                with gr.Row():
                    self.overall_stats = gr.HTML(
                        value=self._create_overall_stats_html(),
                        label="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫"
                    )
                
                # –ö–æ–Ω—Ç—Ä–æ–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
                with gr.Row():
                    self.export_metrics_btn = gr.Button("üìä –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫", variant="secondary")
                    self.compare_metrics_btn = gr.Button("üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å —Å —ç—Ç–∞–ª–æ–Ω–æ–º", variant="primary")
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ metrics gallery: {e}")
            return gr.Column()

    def update_metrics(self, metrics_data: Dict[str, Dict[str, float]]):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –≥–∞–ª–µ—Ä–µ–µ
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –æ–±—Ä–∞–±–æ—Ç–∫–∞ 15 –º–µ—Ç—Ä–∏–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º
        """
        try:
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ –º–µ—Ç—Ä–∏–∫")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            for group_name, metric_names in self.metrics_groups.items():
                group_data = {}
                for metric_name in metric_names:
                    if metric_name in metrics_data:
                        group_data[metric_name] = metrics_data[metric_name]
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
                visualizations = self._create_group_visualizations(group_name, group_data)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
                table_data = self._create_group_table_data(group_name, group_data)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                if group_name == "skull":
                    self.skull_metrics.value = visualizations
                    self.skull_table.value = table_data
                elif group_name == "proportions":
                    self.proportions_metrics.value = visualizations
                    self.proportions_table.value = table_data
                elif group_name == "bone_structure":
                    self.bone_metrics.value = visualizations
                    self.bone_table.value = table_data
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.overall_stats.value = self._create_overall_stats_html(metrics_data)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.update_state(
                metrics_count=len(metrics_data),
                last_update=datetime.now().isoformat(),
                groups_processed=len(self.metrics_groups)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")

    def _create_group_visualizations(self, group_name: str, 
                                   group_data: Dict[str, Dict[str, float]]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã –º–µ—Ç—Ä–∏–∫"""
        try:
            visualizations = []
            
            for metric_name, metric_values in group_data.items():
                if HAS_PLOTLY:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –º–µ—Ç—Ä–∏–∫–∏
                    fig = self._create_metric_trend_plot(metric_name, metric_values)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
                    img_bytes = fig.to_image(format="png", width=300, height=200)
                    visualizations.append(img_bytes)
                else:
                    # –ó–∞–≥–ª—É—à–∫–∞ –±–µ–∑ Plotly
                    visualizations.append(None)
            
            return visualizations
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –≥—Ä—É–ø–ø—ã {group_name}: {e}")
            return []

    def _create_metric_trend_plot(self, metric_name: str, 
                                metric_values: Dict[str, float]) -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            if not HAS_PLOTLY:
                return None
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            dates = list(metric_values.keys())
            values = list(metric_values.values())
            
            fig = go.Figure()
            
            fig.add_trace(go.Scatter(
                x=dates,
                y=values,
                mode='lines+markers',
                name=metric_name,
                line=dict(width=2),
                marker=dict(size=6)
            ))
            
            fig.update_layout(
                title=f"–¢—Ä–µ–Ω–¥: {metric_name}",
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
                height=200,
                width=300,
                margin=dict(l=40, r=40, t=40, b=40)
            )
            
            return fig
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ {metric_name}: {e}")
            return None

    def _create_group_table_data(self, group_name: str, 
                               group_data: Dict[str, Dict[str, float]]) -> List[List[str]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        try:
            table_data = []
            
            for metric_name, metric_values in group_data.items():
                if metric_values:
                    current_value = list(metric_values.values())[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    reference_value = self._get_reference_value(metric_name)
                    deviation = abs(current_value - reference_value) / reference_value * 100
                    status = self._get_metric_status(deviation)
                    
                    table_data.append([
                        metric_name,
                        f"{current_value:.4f}",
                        f"{reference_value:.4f}",
                        f"{deviation:.2f}%",
                        status
                    ])
            
            return table_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –≥—Ä—É–ø–ø—ã {group_name}: {e}")
            return []

    def _get_reference_value(self, metric_name: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏"""
        # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–µ—Ç—Ä–∏–∫ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
        reference_values = {
            "skull_width_ratio": 1.0,
            "temporal_bone_angle": 110.0,
            "zygomatic_arch_width": 0.8,
            "orbital_depth": 0.6,
            "occipital_curve": 0.7,
            "cephalic_index": 0.75,
            "nasolabial_angle": 95.0,
            "orbital_index": 0.85,
            "forehead_height_ratio": 0.35,
            "chin_projection_ratio": 0.4,
            "interpupillary_distance_ratio": 0.15,
            "gonial_angle_asymmetry": 2.0,
            "zygomatic_angle": 45.0,
            "jaw_angle_ratio": 1.2,
            "mandibular_symphysis_angle": 85.0
        }
        
        return reference_values.get(metric_name, 1.0)

    def _get_metric_status(self, deviation: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é"""
        if deviation <= 5.0:
            return "–ù–û–†–ú–ê"
        elif deviation <= 15.0:
            return "–û–¢–ö–õ–û–ù–ï–ù–ò–ï"
        else:
            return "–ê–ù–û–ú–ê–õ–ò–Ø"

    def _create_overall_stats_html(self, metrics_data: Optional[Dict[str, Dict[str, float]]] = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if metrics_data is None:
                return """
                <div style="padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
                    <h4>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫</h4>
                    <p>–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>
                </div>
                """
            
            total_metrics = len(metrics_data)
            normal_count = 0
            deviation_count = 0
            anomaly_count = 0
            
            for metric_name, metric_values in metrics_data.items():
                if metric_values:
                    current_value = list(metric_values.values())[-1]
                    reference_value = self._get_reference_value(metric_name)
                    deviation = abs(current_value - reference_value) / reference_value * 100
                    
                    if deviation <= 5.0:
                        normal_count += 1
                    elif deviation <= 15.0:
                        deviation_count += 1
                    else:
                        anomaly_count += 1
            
            html = f"""
            <div style="padding: 15px; background-color: #f8f9fa; border-radius: 5px;">
                <h4>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫</h4>
                <div style="display: flex; justify-content: space-around; margin: 10px 0;">
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: bold; color: #28a745;">{normal_count}</div>
                        <div>–ù–û–†–ú–ê</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: bold; color: #ffc107;">{deviation_count}</div>
                        <div>–û–¢–ö–õ–û–ù–ï–ù–ò–Ø</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 24px; font-weight: bold; color: #dc3545;">{anomaly_count}</div>
                        <div>–ê–ù–û–ú–ê–õ–ò–ò</div>
                    </div>
                </div>
                <p><strong>–í—Å–µ–≥–æ –º–µ—Ç—Ä–∏–∫:</strong> {total_metrics}</p>
                <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> {datetime.now().strftime('%H:%M:%S')}</p>
            </div>
            """
            
            return html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return f"<div>–û—à–∏–±–∫–∞: {e}</div>"

# === ADVANCED FILTERS ===

class AdvancedFilters(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    """

    def __init__(self):
        super().__init__("filters")
        self.active_filters = {}

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            with gr.Column() as col:
                gr.Markdown("### üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                with gr.Row():
                    self.start_date = gr.Textbox(
                        label="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)",
                        placeholder="1999-01-01"
                    )
                    
                    self.end_date = gr.Textbox(
                        label="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)",
                        placeholder="2024-12-31"
                    )
                
                # –ü–æ—Ä–æ–≥–∏
                with gr.Row():
                    self.authenticity_threshold = gr.Slider(
                        minimum=0.0,
                        maximum=1.0,
                        value=0.5,
                        label="–ü–æ—Ä–æ–≥ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏",
                        info="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏"
                    )
                    
                    self.quality_threshold = gr.Slider(
                        minimum=0.0,
                        maximum=1.0,
                        value=0.6,
                        label="–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞",
                        info="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    )
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                with gr.Row():
                    self.quality_filter = gr.CheckboxGroup(
                        choices=["–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"],
                        label="–§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞",
                        value=["–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"]
                    )
                    
                    self.anomaly_types = gr.CheckboxGroup(
                        choices=["–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ", "–¢–µ–∫—Å—Ç—É—Ä–Ω—ã–µ", "–í—Ä–µ–º–µ–Ω–Ω—ã–µ", "–≠–º–±–µ–¥–¥–∏–Ω–≥", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ"],
                        label="–¢–∏–ø—ã –∞–Ω–æ–º–∞–ª–∏–π",
                        value=[]
                    )
                
                # –£—Ä–æ–≤–Ω–∏ –º–∞—Å–æ–∫
                self.mask_levels = gr.CheckboxGroup(
                    choices=["Level1", "Level2", "Level3", "Level4", "Level5"],
                    label="–£—Ä–æ–≤–Ω–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–∞—Å–æ–∫",
                    value=["Level1", "Level2", "Level3", "Level4", "Level5"]
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                with gr.Accordion("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", open=False):
                    self.cluster_filter = gr.Textbox(
                        label="ID –∫–ª–∞—Å—Ç–µ—Ä–∞",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º"
                    )
                    
                    self.source_filter = gr.CheckboxGroup(
                        choices=["–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ", "–°–ú–ò", "–°–æ—Ü—Å–µ—Ç–∏", "–ê—Ä—Ö–∏–≤–Ω—ã–µ"],
                        label="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                        value=["–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ", "–°–ú–ò", "–ê—Ä—Ö–∏–≤–Ω—ã–µ"]
                    )
                    
                    self.confidence_threshold = gr.Slider(
                        minimum=0.0,
                        maximum=1.0,
                        value=0.8,
                        label="–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏",
                        info="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü–∞"
                    )
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                with gr.Row():
                    self.apply_filters_btn = gr.Button(
                        "‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                        variant="primary"
                    )
                    
                    self.reset_filters_btn = gr.Button(
                        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                        variant="secondary"
                    )
                    
                    self.save_preset_btn = gr.Button(
                        "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç",
                        variant="secondary"
                    )
                
                # –°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
                self.filter_status = gr.HTML(
                    value=self._create_filter_status_html(),
                    label="–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤"
                )
                
                # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
                self.apply_filters_btn.click(
                    fn=self.apply_filters,
                    inputs=[
                        self.start_date, self.end_date, self.authenticity_threshold,
                        self.quality_threshold, self.quality_filter, self.anomaly_types,
                        self.mask_levels, self.cluster_filter, self.source_filter,
                        self.confidence_threshold
                    ],
                    outputs=[self.filter_status]
                )
                
                self.reset_filters_btn.click(
                    fn=self.reset_filters,
                    inputs=[],
                    outputs=[
                        self.start_date, self.end_date, self.authenticity_threshold,
                        self.quality_threshold, self.quality_filter, self.anomaly_types,
                        self.mask_levels, self.cluster_filter, self.source_filter,
                        self.confidence_threshold, self.filter_status
                    ]
                )
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ advanced filters: {e}")
            return gr.Column()

    def apply_filters(self, start_date: str, end_date: str, authenticity_threshold: float,
                     quality_threshold: float, quality_filter: List[str], anomaly_types: List[str],
                     mask_levels: List[str], cluster_filter: str, source_filter: List[str],
                     confidence_threshold: float) -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            logger.info("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            self.active_filters = {
                "date_range": (start_date, end_date),
                "authenticity_threshold": authenticity_threshold,
                "quality_threshold": quality_threshold,
                "quality_filter": quality_filter,
                "anomaly_types": anomaly_types,
                "mask_levels": mask_levels,
                "cluster_filter": cluster_filter,
                "source_filter": source_filter,
                "confidence_threshold": confidence_threshold,
                "applied_at": datetime.now().isoformat()
            }
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.update_state(
                active_filters=self.active_filters,
                filters_count=len([f for f in self.active_filters.values() if f])
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_html = self._create_filter_status_html()
            
            logger.info(f"–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: {len(self.active_filters)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            return status_html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return f"<div style='color: red;'>–û—à–∏–±–∫–∞: {e}</div>"

    def reset_filters(self) -> Tuple[str, str, float, float, List[str], List[str], List[str], str, List[str], float, str]:
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            logger.info("–°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            
            self.active_filters = {}
            self.clear_state()
            
            # –í–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return (
                "",  # start_date
                "",  # end_date
                0.5,  # authenticity_threshold
                0.6,  # quality_threshold
                ["–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"],  # quality_filter
                [],  # anomaly_types
                ["Level1", "Level2", "Level3", "Level4", "Level5"],  # mask_levels
                "",  # cluster_filter
                ["–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ", "–°–ú–ò", "–ê—Ä—Ö–∏–≤–Ω—ã–µ"],  # source_filter
                0.8,  # confidence_threshold
                self._create_filter_status_html()  # filter_status
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return ("",) * 10 + (f"<div style='color: red;'>–û—à–∏–±–∫–∞: {e}</div>",)

    def _create_filter_status_html(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            if not self.active_filters:
                return """
                <div style="padding: 10px; background-color: #e3f2fd; border-radius: 5px;">
                    <h4>–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤</h4>
                    <p>–§–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã. –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.</p>
                </div>
                """
            
            filters_count = len([f for f in self.active_filters.values() if f])
            applied_at = self.active_filters.get("applied_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            html = f"""
            <div style="padding: 10px; background-color: #e8f5e8; border-radius: 5px;">
                <h4>–°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤</h4>
                <p><strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:</strong> {filters_count}</p>
                <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω—ã:</strong> {applied_at}</p>
                <div style="margin-top: 10px;">
            """
            
            # –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if self.active_filters.get("date_range"):
                start, end = self.active_filters["date_range"]
                if start or end:
                    html += f"<p>üìÖ <strong>–ü–µ—Ä–∏–æ–¥:</strong> {start or '–Ω–∞—á–∞–ª–æ'} ‚Äî {end or '–∫–æ–Ω–µ—Ü'}</p>"
            
            if self.active_filters.get("authenticity_threshold", 0) > 0:
                html += f"<p>üéØ <strong>–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å ‚â•</strong> {self.active_filters['authenticity_threshold']:.2f}</p>"
            
            if self.active_filters.get("quality_threshold", 0) > 0:
                html += f"<p>‚≠ê <strong>–ö–∞—á–µ—Å—Ç–≤–æ ‚â•</strong> {self.active_filters['quality_threshold']:.2f}</p>"
            
            if self.active_filters.get("mask_levels"):
                levels = ", ".join(self.active_filters["mask_levels"])
                html += f"<p>üé≠ <strong>–£—Ä–æ–≤–Ω–∏ –º–∞—Å–æ–∫:</strong> {levels}</p>"
            
            html += "</div></div>"
            
            return html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
            return f"<div style='color: red;'>–û—à–∏–±–∫–∞: {e}</div>"

# === INTERACTIVE COMPARISON ===
# === INTERACTIVE COMPARISON ===

class InteractiveComparison(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—è–º–∏
    """

    def __init__(self):
        super().__init__("comparison")
        self.comparison_data = {}
        self.selected_identities = []

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        try:
            with gr.Column() as col:
                gr.Markdown("### üîÑ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π")
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π
                with gr.Row():
                    self.identity_a_selector = gr.Dropdown(
                        choices=[],
                        label="–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å A",
                        info="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
                    )
                    
                    self.identity_b_selector = gr.Dropdown(
                        choices=[],
                        label="–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å B", 
                        info="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
                    )
                
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                with gr.Row():
                    self.left_image = gr.Image(
                        label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ A",
                        height=300,
                        width=300
                    )
                    
                    self.right_image = gr.Image(
                        label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ B",
                        height=300,
                        width=300
                    )
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
                self.comparison_metrics = gr.DataFrame(
                    headers=["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ A", "–ó–Ω–∞—á–µ–Ω–∏–µ B", "–†–∞–∑–Ω–∏—Ü–∞", "–°—Ç–∞—Ç—É—Å"],
                    label="–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫",
                    interactive=False,
                    height=400
                )
                
                # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                with gr.Row():
                    self.similarity_score = gr.Number(
                        label="–û–±—â–∏–π –±–∞–ª–ª —Å—Ö–æ–∂–µ—Å—Ç–∏",
                        precision=3,
                        interactive=False
                    )
                    
                    self.confidence_level = gr.Textbox(
                        label="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                        interactive=False
                    )
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                with gr.Row():
                    self.compare_btn = gr.Button("üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å", variant="primary")
                    self.swap_btn = gr.Button("üîÄ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏", variant="secondary")
                    self.export_comparison_btn = gr.Button("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", variant="secondary")
                
                # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
                self.compare_btn.click(
                    fn=self.perform_comparison,
                    inputs=[self.identity_a_selector, self.identity_b_selector],
                    outputs=[self.left_image, self.right_image, self.comparison_metrics, 
                            self.similarity_score, self.confidence_level]
                )
                
                self.swap_btn.click(
                    fn=self.swap_identities,
                    inputs=[self.identity_a_selector, self.identity_b_selector],
                    outputs=[self.identity_a_selector, self.identity_b_selector]
                )
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ comparison: {e}")
            return gr.Column()

    def perform_comparison(self, identity_a: str, identity_b: str) -> Tuple[Any, Any, List[List], float, str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—è–º–∏"""
        try:
            if not identity_a or not identity_b:
                return None, None, [], 0.0, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π
            data_a = self.comparison_data.get(identity_a, {})
            data_b = self.comparison_data.get(identity_b, {})
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparison_table = self._create_comparison_table(data_a, data_b)
            
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
            similarity = self._calculate_similarity_score(data_a, data_b)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = self._determine_confidence_level(similarity)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_a = data_a.get("image_path")
            image_b = data_b.get("image_path")
            
            return image_a, image_b, comparison_table, similarity, confidence
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return None, None, [], 0.0, f"–û—à–∏–±–∫–∞: {str(e)}"

    def _create_comparison_table(self, data_a: Dict, data_b: Dict) -> List[List]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        try:
            table_data = []
            
            # –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            metrics_to_compare = [
                "skull_width_ratio", "temporal_bone_angle", "zygomatic_arch_width",
                "orbital_depth", "occipital_curve", "cephalic_index", "nasolabial_angle",
                "orbital_index", "forehead_height_ratio", "chin_projection_ratio",
                "interpupillary_distance_ratio", "gonial_angle_asymmetry", 
                "zygomatic_angle", "jaw_angle_ratio", "mandibular_symphysis_angle"
            ]
            
            for metric in metrics_to_compare:
                value_a = data_a.get("metrics", {}).get(metric, 0.0)
                value_b = data_b.get("metrics", {}).get(metric, 0.0)
                
                difference = abs(value_a - value_b)
                relative_diff = (difference / max(abs(value_a), abs(value_b), 1e-6)) * 100
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if relative_diff < 5.0:
                    status = "–ò–î–ï–ù–¢–ò–ß–ù–û"
                elif relative_diff < 15.0:
                    status = "–ü–û–•–û–ñ–ï"
                else:
                    status = "–†–ê–ó–õ–ò–ß–ù–û"
                
                table_data.append([
                    metric,
                    f"{value_a:.4f}",
                    f"{value_b:.4f}",
                    f"{relative_diff:.2f}%",
                    status
                ])
            
            return table_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return []

    def _calculate_similarity_score(self, data_a: Dict, data_b: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏"""
        try:
            similarities = []
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
            geom_a = data_a.get("geometry_score", 0.0)
            geom_b = data_b.get("geometry_score", 0.0)
            geom_sim = 1.0 - abs(geom_a - geom_b)
            similarities.append(geom_sim)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            emb_a = data_a.get("embedding_score", 0.0)
            emb_b = data_b.get("embedding_score", 0.0)
            emb_sim = 1.0 - abs(emb_a - emb_b)
            similarities.append(emb_sim)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
            tex_a = data_a.get("texture_score", 0.0)
            tex_b = data_b.get("texture_score", 0.0)
            tex_sim = 1.0 - abs(tex_a - tex_b)
            similarities.append(tex_sim)
            
            # –û–±—â–∏–π –±–∞–ª–ª
            overall_similarity = np.mean(similarities) if similarities else 0.0
            return float(np.clip(overall_similarity, 0.0, 1.0))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
            return 0.0

    def _determine_confidence_level(self, similarity: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if similarity >= 0.9:
            return "–û–ß–ï–ù–¨ –í–´–°–û–ö–ò–ô"
        elif similarity >= 0.7:
            return "–í–´–°–û–ö–ò–ô"
        elif similarity >= 0.5:
            return "–°–†–ï–î–ù–ò–ô"
        elif similarity >= 0.3:
            return "–ù–ò–ó–ö–ò–ô"
        else:
            return "–û–ß–ï–ù–¨ –ù–ò–ó–ö–ò–ô"

    def swap_identities(self, identity_a: str, identity_b: str) -> Tuple[str, str]:
        """–°–º–µ–Ω–∞ –º–µ—Å—Ç–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π"""
        return identity_b, identity_a

    def update_available_identities(self, identities: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π"""
        try:
            self.identity_a_selector.choices = identities
            self.identity_b_selector.choices = identities
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π: {len(identities)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π: {e}")

# === ADVANCED SEARCH ===

class AdvancedSearch(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø–æ–∏—Å–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º, –¥–∞—Ç–∞–º –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    """

    def __init__(self):
        super().__init__("search")
        self.search_index = {}
        self.search_results = []

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            with gr.Column() as col:
                gr.Markdown("### üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫")
                
                # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                self.search_query = gr.Textbox(
                    label="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞...",
                    lines=1
                )
                
                # –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                with gr.Row():
                    self.search_type = gr.Radio(
                        choices=["–¢–µ–∫—Å—Ç", "–ú–µ—Ç—Ä–∏–∫–∏", "–î–∞—Ç—ã", "–ê–Ω–æ–º–∞–ª–∏–∏"],
                        value="–¢–µ–∫—Å—Ç",
                        label="–¢–∏–ø –ø–æ–∏—Å–∫–∞"
                    )
                    
                    self.sort_by = gr.Dropdown(
                        choices=["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–î–∞—Ç–∞", "–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å", "–ö–∞—á–µ—Å—Ç–≤–æ"],
                        value="–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å",
                        label="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
                    )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                with gr.Accordion("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", open=False):
                    with gr.Row():
                        self.date_from = gr.Textbox(
                            label="–î–∞—Ç–∞ –æ—Ç (YYYY-MM-DD)",
                            placeholder="1999-01-01"
                        )
                        
                        self.date_to = gr.Textbox(
                            label="–î–∞—Ç–∞ –¥–æ (YYYY-MM-DD)",
                            placeholder="2024-12-31"
                        )
                    
                    with gr.Row():
                        self.min_authenticity = gr.Slider(
                            minimum=0.0,
                            maximum=1.0,
                            value=0.0,
                            label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å"
                        )
                        
                        self.max_authenticity = gr.Slider(
                            minimum=0.0,
                            maximum=1.0,
                            value=1.0,
                            label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å"
                        )
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                with gr.Row():
                    self.search_btn = gr.Button("üîç –ü–æ–∏—Å–∫", variant="primary")
                    self.clear_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", variant="secondary")
                    self.save_query_btn = gr.Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", variant="secondary")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                self.search_results_display = gr.DataFrame(
                    headers=["ID", "–î–∞—Ç–∞", "–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ü—É—Ç—å"],
                    label="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
                    interactive=False,
                    height=400
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
                self.search_stats = gr.HTML(
                    value="<div>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞</div>",
                    label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞"
                )
                
                # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
                self.search_btn.click(
                    fn=self.perform_search,
                    inputs=[self.search_query, self.search_type, self.sort_by,
                           self.date_from, self.date_to, self.min_authenticity, self.max_authenticity],
                    outputs=[self.search_results_display, self.search_stats]
                )
                
                self.clear_btn.click(
                    fn=self.clear_search,
                    inputs=[],
                    outputs=[self.search_query, self.search_results_display, self.search_stats]
                )
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ search: {e}")
            return gr.Column()

    def perform_search(self, query: str, search_type: str, sort_by: str,
                      date_from: str, date_to: str, min_auth: float, max_auth: float) -> Tuple[List[List], str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
        try:
            if not query.strip():
                return [], "<div>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</div>"
            
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞: '{query}' —Ç–∏–ø–∞ '{search_type}'")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            filtered_results = self._filter_results(query, search_type, date_from, date_to, min_auth, max_auth)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            sorted_results = self._sort_results(filtered_results, sort_by)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_data = self._prepare_display_data(sorted_results)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_html = self._create_search_stats_html(len(sorted_results), query)
            
            return display_data, stats_html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return [], f"<div style='color: red;'>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}</div>"

    def _filter_results(self, query: str, search_type: str, date_from: str, date_to: str,
                       min_auth: float, max_auth: float) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            filtered = []
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            sample_results = [
                {
                    "id": "img_001",
                    "date": "2020-01-15",
                    "authenticity": 0.85,
                    "description": "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ",
                    "path": "/path/to/img_001.jpg"
                },
                {
                    "id": "img_002", 
                    "date": "2021-03-20",
                    "authenticity": 0.45,
                    "description": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    "path": "/path/to/img_002.jpg"
                }
            ]
            
            for result in sample_results:
                # –§–∏–ª—å—Ç—Ä –ø–æ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
                if not (min_auth <= result["authenticity"] <= max_auth):
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                if date_from and result["date"] < date_from:
                    continue
                if date_to and result["date"] > date_to:
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É
                if search_type == "–¢–µ–∫—Å—Ç":
                    if query.lower() in result["description"].lower():
                        filtered.append(result)
                elif search_type == "–ú–µ—Ç—Ä–∏–∫–∏":
                    # –ü–æ–∏—Å–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
                    if query.lower() in result["id"].lower():
                        filtered.append(result)
                else:
                    filtered.append(result)
            
            return filtered
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return []

    def _sort_results(self, results: List[Dict], sort_by: str) -> List[Dict]:
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            if sort_by == "–î–∞—Ç–∞":
                return sorted(results, key=lambda x: x["date"], reverse=True)
            elif sort_by == "–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å":
                return sorted(results, key=lambda x: x["authenticity"], reverse=True)
            elif sort_by == "–ö–∞—á–µ—Å—Ç–≤–æ":
                return sorted(results, key=lambda x: x.get("quality", 0.0), reverse=True)
            else:  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                return results
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            return results

    def _prepare_display_data(self, results: List[Dict]) -> List[List]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            display_data = []
            
            for result in results:
                display_data.append([
                    result["id"],
                    result["date"],
                    f"{result['authenticity']:.3f}",
                    result["description"],
                    result["path"]
                ])
            
            return display_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def _create_search_stats_html(self, count: int, query: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
        try:
            html = f"""
            <div style="padding: 10px; background-color: #f0f0f0; border-radius: 5px;">
                <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞</h4>
                <p><strong>–ó–∞–ø—Ä–æ—Å:</strong> "{query}"</p>
                <p><strong>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</strong> {count}</p>
                <p><strong>–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞:</strong> < 1 —Å–µ–∫</p>
            </div>
            """
            return html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "<div>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>"

    def clear_search(self) -> Tuple[str, List[List], str]:
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞"""
        return "", [], "<div>–ü–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω</div>"

# === AI ASSISTANT ===

class AIAssistant(BaseUIComponent):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø–æ–º–æ—â—å –≤ –∞–Ω–∞–ª–∏–∑–µ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    """

    def __init__(self):
        super().__init__("assistant")
        self.conversation_history = []

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        try:
            with gr.Column() as col:
                gr.Markdown("### ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
                self.chat_history = gr.Chatbot(
                    label="–î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º",
                    height=400,
                    bubble_full_width=False
                )
                
                # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with gr.Row():
                    self.user_input = gr.Textbox(
                        label="–í–∞—à –≤–æ–ø—Ä–æ—Å",
                        placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± –∞–Ω–∞–ª–∏–∑–µ...",
                        lines=1,
                        scale=4
                    )
                    
                    self.send_btn = gr.Button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary", scale=1)
                
                # –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                with gr.Row():
                    self.quick_questions = gr.Radio(
                        choices=[
                            "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
                            "–ö–∞–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã?",
                            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
                            "–°—Ä–∞–≤–Ω–∏—Ç—å —Å —ç—Ç–∞–ª–æ–Ω–æ–º"
                        ],
                        label="–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
                    )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", open=False):
                    self.response_style = gr.Radio(
                        choices=["–ö—Ä–∞—Ç–∫–∏–π", "–ü–æ–¥—Ä–æ–±–Ω—ã–π", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π"],
                        value="–ü–æ–¥—Ä–æ–±–Ω—ã–π",
                        label="–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤"
                    )
                    
                    self.include_context = gr.Checkbox(
                        label="–í–∫–ª—é—á–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞",
                        value=True
                    )
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                with gr.Row():
                    self.clear_chat_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", variant="secondary")
                    self.export_chat_btn = gr.Button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞", variant="secondary")
                
                # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
                self.send_btn.click(
                    fn=self.process_user_message,
                    inputs=[self.user_input, self.response_style, self.include_context],
                    outputs=[self.chat_history, self.user_input]
                )
                
                self.user_input.submit(
                    fn=self.process_user_message,
                    inputs=[self.user_input, self.response_style, self.include_context],
                    outputs=[self.chat_history, self.user_input]
                )
                
                self.quick_questions.change(
                    fn=self.handle_quick_question,
                    inputs=[self.quick_questions, self.response_style],
                    outputs=[self.chat_history]
                )
                
                self.clear_chat_btn.click(
                    fn=self.clear_chat,
                    inputs=[],
                    outputs=[self.chat_history]
                )
                
            return col
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ assistant: {e}")
            return gr.Column()

    def process_user_message(self, message: str, style: str, include_context: bool) -> Tuple[List[List], str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not message.strip():
                return self.conversation_history, ""
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.conversation_history.append([message, None])
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            response = self._generate_response(message, style, include_context)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            self.conversation_history[-1][1] = response
            
            return self.conversation_history, ""
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_response = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            self.conversation_history.append([message, error_response])
            return self.conversation_history, ""

    def _generate_response(self, message: str, style: str, include_context: bool) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            responses = {
                "–∫—Ä–∞—Ç–∫–∏–π": "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
                "–ø–æ–¥—Ä–æ–±–Ω—ã–π": f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: '{message}'. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏.",
                "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ '{message}': –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º—ã 3DDFA V2 –∏ InsightFace –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏."
            }
            
            base_response = responses.get(style.lower(), responses["–ø–æ–¥—Ä–æ–±–Ω—ã–π"])
            
            if include_context:
                context = "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–∞–π–µ—Å–æ–≤—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞."
                base_response += context
            
            return base_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."

    def handle_quick_question(self, question: str, style: str) -> List[List]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            if not question:
                return self.conversation_history
            
            response = self._generate_response(question, style, True)
            self.conversation_history.append([question, response])
            
            return self.conversation_history
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return self.conversation_history

    def clear_chat(self) -> List[List]:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        self.conversation_history = []
        return []

# === –≠–ö–°–ü–û–†–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===

def create_ui_components() -> Dict[str, BaseUIComponent]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        components = {
            '3d_viewer': Interactive3DViewer(),
            'heatmap': InteractiveHeatmap(),
            'temporal_slider': TemporalSlider(),
            'metrics_gallery': MetricsGallery(),
            'filters': AdvancedFilters(),
            'comparison': InteractiveComparison(),
            'search': AdvancedSearch(),
            'assistant': AIAssistant()
        }
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(components)} UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        return components
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return {}

def get_component_by_id(component_id: str) -> Optional[BaseUIComponent]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ ID"""
    try:
        components = create_ui_components()
        return components.get(component_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ {component_id}: {e}")
        return None

# === –§–£–ù–ö–¶–ò–ò –°–ê–ú–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===

def self_test():
    """–°–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è ui_components"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ui_components...")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = create_ui_components()
        assert len(components) > 0, "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
        
        # –¢–µ—Å—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        for name, component in components.items():
            assert isinstance(component, BaseUIComponent), f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç BaseUIComponent"
            assert hasattr(component, 'render'), f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ render"
            assert hasattr(component, 'component_id'), f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ –∏–º–µ–µ—Ç component_id"
        
        # –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        viewer_3d = components['3d_viewer']
        assert viewer_3d.component_id == "3d_viewer", "–ù–µ–≤–µ—Ä–Ω—ã–π ID 3D viewer"
        
        heatmap = components['heatmap']
        assert heatmap.component_id == "heatmap", "–ù–µ–≤–µ—Ä–Ω—ã–π ID heatmap"
        
        logger.info("–°–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ui_components –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

# === –¢–û–ß–ö–ê –í–•–û–î–ê ===

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –º–æ–¥—É–ª—è
    success = self_test()
    if success:
        print("‚úÖ –ú–æ–¥—É–ª—å ui_components —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        components = create_ui_components()
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(components)}")
        
        for name, component in components.items():
            print(f"üîß {name}: {component.__class__.__name__} (ID: {component.component_id})")
        
        # –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞...")
        for name, component in components.items():
            try:
                rendered = component.render()
                print(f"  ‚úì {name}: —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω")
            except Exception as e:
                print(f"  ‚ùå {name}: –æ—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ - {e}")
        
        print(f"\nüéâ –í—Å–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –º–æ–¥—É–ª–µ ui_components")
        exit(1)