"""
GradioInterface - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-06-15
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º
"""

import os
os.makedirs("logs", exist_ok=True)
import gradio as gr
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import logging
from typing import Dict, List, Optional, Any, Callable, Tuple, Union, AsyncGenerator
from pathlib import Path
import json
import pickle
import asyncio
from datetime import datetime, timedelta
import cv2
import os
from PIL import Image

# –£–¥–∞–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–≥–µ—Ä–∞ (logging.basicConfig –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤) –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, –æ—Å—Ç–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —á–µ—Ä–µ–∑ logging.getLogger(__name__).
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
try:
    from core_config import (
        MAX_FILE_UPLOAD_COUNT, VISUALIZATION_PARAMS, AUTHENTICITY_WEIGHTS,
        MASK_DETECTION_LEVELS, CRITICAL_THRESHOLDS, CACHE_DIR, ERROR_CODES
    )
    from face_3d_analyzer import Face3DAnalyzer
    from embedding_analyzer import EmbeddingAnalyzer
    from texture_analyzer import TextureAnalyzer
    from temporal_analyzer import TemporalAnalyzer
    from anomaly_detector import AnomalyDetector
    from medical_validator import MedicalValidator
    from data_manager import DataManager
    from metrics_calculator import MetricsCalculator
    logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    MAX_FILE_UPLOAD_COUNT = 1500
    VISUALIZATION_PARAMS = {"height": 600, "width": 800, "interactive": True}
    AUTHENTICITY_WEIGHTS = {"geometry": 0.15, "embedding": 0.30, "texture": 0.10}
    MASK_DETECTION_LEVELS = {}
    CRITICAL_THRESHOLDS = {"min_authenticity_score": 0.6}
    CACHE_DIR = Path("cache")
    ERROR_CODES = {"E001": "NO_FACE_DETECTED", "E002": "LOW_QUALITY_IMAGE"}

# ==================== UI –ö–û–ú–ü–û–ù–ï–ù–¢–´ ====================

class SmartFileUploader:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 1500 —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
    """
    
    def __init__(self, max_files: int = MAX_FILE_UPLOAD_COUNT):
        self.max_files = max_files
        self.uploaded_files = []
        self.quality_cache = {}
        logger.info(f"SmartFileUploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ª–∏–º–∏—Ç–æ–º {max_files} —Ñ–∞–π–ª–æ–≤")

    def create_uploader(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        with gr.Column() as col:
            gr.Markdown("## üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            self.file_upload = gr.File(
                file_count="multiple",
                file_types=[".jpg", ".jpeg", ".png"],
                label=f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞–∫—Å. {self.max_files})",
            )
            
            with gr.Row():
                self.upload_progress = gr.Progress()
                self.upload_status = gr.Textbox(
                    label="–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏",
                    interactive=False,
                    lines=2
                )
            
            with gr.Row():
                self.quality_threshold = gr.Slider(
                    minimum=0.0,
                    maximum=1.0,
                    value=0.6,
                    label="–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞",
                    info="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                self.auto_enhance = gr.Checkbox(
                    label="–ê–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏–µ",
                    value=True,
                    info="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"
                )
            
            self.preview_gallery = gr.Gallery(
                label="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä",
                columns=5,
                rows=2,
                height=300,
                allow_preview=True
            )
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.file_upload.change(
                fn=self.process_uploaded_files,
                inputs=[self.file_upload, self.quality_threshold],
                outputs=[self.upload_status, self.preview_gallery]
            )
        
        return col

    def process_uploaded_files(self, files: List[str], quality_threshold: float) -> Tuple[str, List[Any]]:
        print("=== process_uploaded_files –≤—ã–∑–≤–∞–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ) ===")
        logger.info(f"[DEBUG] process_uploaded_files –≤—ã–∑–≤–∞–Ω, files: {files}, quality_threshold: {quality_threshold}")
        from PIL import Image
        import os

        if not files:
            self.uploaded_files = []
            return "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã", []

        valid_files = []
        preview_images = []
        for file_path in files:
            try:
                if not os.path.exists(file_path):
                    continue
                img = Image.open(file_path)
                preview_images.append(img)
                valid_files.append(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

        self.uploaded_files = valid_files

        status = f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(valid_files)} –∏–∑ {len(files)} —Ñ–∞–π–ª–æ–≤"
        return status, preview_images

    def _process_uploaded_files_impl(self, files: List[str], quality_threshold: float) -> Tuple[str, List[str]]:
        if not files:
            return "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã", []
        
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(files)} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
            if len(files) > self.max_files:
                return f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: {len(files)} > {self.max_files}", []
            
            valid_files = []
            invalid_files = []
            quality_scores = {}
            
            for file_path in files:
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    quality_score = self._assess_image_quality(file_path)
                    quality_scores[file_path] = quality_score
                    
                    if quality_score >= quality_threshold:
                        valid_files.append(file_path)
                    else:
                        invalid_files.append(file_path)
                        logger.warning(f"–§–∞–π–ª {file_path} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.3f}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    invalid_files.append(file_path)
            
            self.uploaded_files = valid_files
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_lines = [
                f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}",
                f"–ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {len(valid_files)}",
                f"–û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {len(invalid_files)}",
                f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {np.mean(list(quality_scores.values())):.3f}"
            ]
            
            if invalid_files:
                status_lines.append(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join([os.path.basename(f) for f in invalid_files[:5]])}")
                if len(invalid_files) > 5:
                    status_lines.append(f"... –∏ –µ—â–µ {len(invalid_files) - 5}")
            
            status = "\n".join(status_lines)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–µ—Ä–≤—ã–µ 10 –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
            preview_images = valid_files[:10]
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(valid_files)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            return status, preview_images
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}", []

    def _assess_image_quality(self, file_path: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if file_path in self.quality_cache:
                return self.quality_cache[file_path]
            
            image = cv2.imread(file_path)
            if image is None:
                return 0.0
            
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            h, w = gray.shape
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            resolution_score = 1.0 if w >= 200 and h >= 200 else 0.5
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º—ã—Ç–∏—è
            blur_score = cv2.Laplacian(gray, cv2.CV_64F).var()
            blur_quality = 1.0 if blur_score >= 100 else max(0.0, blur_score / 150.0)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—É–º–∞
            noise_level = np.std(gray)
            noise_quality = 1.0 if noise_level <= 30 else max(0.0, 1.0 - (noise_level - 10) / 40.0)
            
            # –û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
            quality_score = (resolution_score + blur_quality + noise_quality) / 3.0
            
            self.quality_cache[file_path] = quality_score
            return quality_score
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ {file_path}: {e}")
            return 0.0

class RealTimeAnalyzer:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–∏–Ω–≥ –∏ cancel –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    
    def __init__(self, data_processor, results_aggregator, smart_file_uploader):
        self.is_running = False
        self.current_progress = 0
        self.cancel_requested = False
        self.data_processor = data_processor
        self.results_aggregator = results_aggregator
        self.smart_file_uploader = smart_file_uploader
        logger.info("RealTimeAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_analyzer(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        with gr.Column() as col:
            gr.Markdown("## ‚ö° –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            
            with gr.Row():
                self.start_btn = gr.Button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", variant="primary")
                self.pause_btn = gr.Button("‚è∏Ô∏è –ü–∞—É–∑–∞")
                self.stop_btn = gr.Button("‚èπÔ∏è –°—Ç–æ–ø", variant="stop")
            
            with gr.Row():
                self.current_file = gr.Textbox(
                    label="–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª",
                    interactive=False
                )
                self.eta = gr.Textbox(
                    label="–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è",
                    interactive=False
                )
            
            self.live_metrics = gr.HTML(label="–ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            self.live_plot = gr.Plot(label="–ì—Ä–∞—Ñ–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.start_btn.click(
                fn=self.start_analysis,
                inputs=[],
                outputs=[self.current_file, self.live_metrics, self.live_plot]
            )
            
            self.stop_btn.click(
                fn=self.stop_analysis,
                inputs=[],
                outputs=[self.current_file, self.live_metrics, self.live_plot]
            )
        
        return col

    async def start_analysis(self, progress: gr.Progress) -> AsyncGenerator[Tuple[str, str, go.Figure], None]:
        print("=== start_analysis –≤—ã–∑–≤–∞–Ω ===")
        logger.info("[DEBUG] start_analysis –≤—ã–∑–≤–∞–Ω")
        files_to_process = self.smart_file_uploader.uploaded_files
        print(f"[DEBUG] self.smart_file_uploader.uploaded_files: {files_to_process}")
        logger.info(f"[DEBUG] self.smart_file_uploader.uploaded_files: {files_to_process}")
        # –Ø–≤–Ω—ã–π yield –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        yield "–û–∂–∏–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...", "<div style='color: gray;'>–û–∂–∏–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...</div>", go.Figure()
        if not files_to_process:
            print("[DEBUG] –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            logger.info("[DEBUG] –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            self.is_running = False
            yield "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", "<div style='color: red;'>‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.</div>", go.Figure()
            return

        total_files = len(files_to_process)
        authenticity_scores_history = []
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=[], y=[], mode='lines', name='–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å'))
        fig.update_layout(title="–î–∏–Ω–∞–º–∏–∫–∞ –±–∞–ª–ª–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏", xaxis_title="–§–∞–π–ª", yaxis_title="–ë–∞–ª–ª")

        any_success = False
        try:
            yield "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω...", "<div style='color: orange;'>‚è≥ –ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</div>", fig
            for i, file_path in enumerate(files_to_process):
                try:
                    print(f"[DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {file_path}")
                    logger.info(f"[DEBUG] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {file_path}")
                    analysis_result = await self.data_processor.process_single_file_async(file_path)
                    print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}")
                    logger.info(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_result}")

                    # –ù–æ–≤—ã–π –±–ª–æ–∫: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
                    error_msg = ""
                    if hasattr(analysis_result, "anomalies") and analysis_result.anomalies:
                        error_msg = analysis_result.anomalies.get("processing_error") or ""
                    if hasattr(analysis_result, "metadata") and "error" in analysis_result.metadata:
                        error_msg = analysis_result.metadata["error"]

                    if error_msg:
                        status = f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {error_msg}"
                        live_metrics = f"<div style='color: red;'>–û—à–∏–±–∫–∞: {error_msg}</div>"
                        yield status, live_metrics, fig
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É
                    else:
                        score = getattr(analysis_result, 'authenticity_score', 0.0)
                        authenticity_scores_history.append(score)
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                        fig.data[0].x = list(range(len(authenticity_scores_history)))
                        fig.data[0].y = authenticity_scores_history
                        status = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª {i+1}/{total_files}: {os.path.basename(file_path)}"
                        live_metrics = f"<div style='color: blue;'>‚úÖ Score: {score:.3f}</div>"
                        yield status, live_metrics, fig
                        any_success = True
                except Exception as e:
                    import traceback
                    tb = traceback.format_exc()
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}\n{tb}")
                    print(f"=== –û–®–ò–ë–ö–ê –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path} ===\n{tb}")
                    yield f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}", f"<div style='color: red;'>–û—à–∏–±–∫–∞: {e}<br><pre>{tb}</pre></div>", fig
            self.is_running = False
            # –Ø–≤–Ω—ã–π yield –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã Gradio –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            if any_success:
                yield "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.", "<div style='color: green;'>‚úî –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!</div>", fig
            else:
                yield "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏.", "<div style='color: red;'>‚ùå –í—Å–µ —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</div>", fig
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_analysis: {e}")
            yield f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}", f"<div style='color: red;'>‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.</div>", go.Figure()
            self.is_running = False

    def stop_analysis(self) -> Tuple[str, str, go.Figure]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if self.is_running:
            self.cancel_requested = True
            logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞.")
            return "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É...", "<div style='color: orange;'>‚è≥ –û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞...</div>", go.Figure()
        else:
            return "–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω.", "", go.Figure()

class Interactive3DViewer:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å landmarks –∏ dense points
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: 68 landmarks, 3D wireframe, dense surface points
    """
    
    def __init__(self):
        self.current_landmarks = None
        self.current_dense_points = None
        logger.info("Interactive3DViewer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        with gr.Column() as col:
            gr.Markdown("## üéØ 3D –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Ü–∞")
            
            with gr.Row():
                self.wireframe_toggle = gr.Checkbox(
                    label="Wireframe —Ä–µ–∂–∏–º",
                    value=True,
                    info="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä–∫–∞—Å –ª–∏—Ü–∞"
                )
                self.dense_points_toggle = gr.Checkbox(
                    label="–ü–ª–æ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏",
                    value=False,
                    info="–ü–æ–∫–∞–∑–∞—Ç—å 38,000 —Ç–æ—á–µ–∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
                )
                self.landmarks_toggle = gr.Checkbox(
                    label="68 –ª–∞–Ω–¥–º–∞—Ä–æ–∫",
                    value=True,
                    info="–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏"
                )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: 3D –º–æ–¥–µ–ª—å —Å –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏
            self.model_3d = gr.Model3D(
                label="3D –º–æ–¥–µ–ª—å –ª–∏—Ü–∞",
                height=500,
                interactive=True,
                camera_position=(0, 0, 5)
            )
            
            with gr.Row():
                self.rotation_x = gr.Slider(
                    minimum=-180,
                    maximum=180,
                    value=0,
                    label="–ü–æ–≤–æ—Ä–æ—Ç X (pitch)"
                )
                self.rotation_y = gr.Slider(
                    minimum=-180,
                    maximum=180,
                    value=0,
                    label="–ü–æ–≤–æ—Ä–æ—Ç Y (yaw)"
                )
                self.rotation_z = gr.Slider(
                    minimum=-180,
                    maximum=180,
                    value=0,
                    label="–ü–æ–≤–æ—Ä–æ—Ç Z (roll)"
                )
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            for control in [self.wireframe_toggle, self.dense_points_toggle, self.landmarks_toggle]:
                control.change(
                    fn=self.update_3d_view,
                    inputs=[self.wireframe_toggle, self.dense_points_toggle, self.landmarks_toggle],
                    outputs=[self.model_3d]
                )
        
        return col

    def update_3d_view(self, wireframe: bool, dense_points: bool, landmarks: bool) -> str:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D –≤–∏–¥–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: wireframe, dense points, 68 landmarks
        """
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D –≤–∏–¥–∞: wireframe={wireframe}, dense={dense_points}, landmarks={landmarks}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if landmarks and self.current_landmarks is None:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 68 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∞–Ω–¥–º–∞—Ä–æ–∫
                self.current_landmarks = self._generate_test_landmarks()
            
            if dense_points and self.current_dense_points is None:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–æ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫
                self.current_dense_points = self._generate_test_dense_points()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ OBJ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            obj_content = self._create_obj_content(wireframe, dense_points, landmarks)
            
            return obj_content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 3D –≤–∏–¥–∞: {e}")
            return ""

    def _generate_test_landmarks(self) -> np.ndarray:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö 68 –ª–∞–Ω–¥–º–∞—Ä–æ–∫"""
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞ –ª–∏—Ü–∞
        landmarks = np.zeros((68, 3))
        
        # –ö–æ–Ω—Ç—É—Ä –ª–∏—Ü–∞ (0-16)
        for i in range(17):
            angle = (i - 8) * np.pi / 16
            landmarks[i] = [np.sin(angle) * 50, -abs(i - 8) * 5 - 30, np.cos(angle) * 10]
        
        # –ë—Ä–æ–≤–∏ (17-26)
        for i in range(17, 27):
            x = (i - 21.5) * 8
            landmarks[i] = [x, 20, 5]
        
        # –ù–æ—Å (27-35)
        for i in range(27, 36):
            y = 20 - (i - 27) * 5
            landmarks[i] = [0, y, 10 + (i - 31) ** 2]
        
        # –ì–ª–∞–∑–∞ (36-47)
        for i in range(36, 48):
            eye_side = -1 if i < 42 else 1
            angle = (i % 6) * np.pi / 3
            landmarks[i] = [eye_side * 20 + np.cos(angle) * 8, 10 + np.sin(angle) * 4, 5]
        
        # –†–æ—Ç (48-67)
        for i in range(48, 68):
            angle = (i - 57.5) * np.pi / 10
            landmarks[i] = [np.sin(angle) * 15, -10 + np.cos(angle) * 5, 8]
        
        return landmarks

    def _generate_test_dense_points(self) -> np.ndarray:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–æ—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 38,000)"""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —Ç–æ—á–µ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        x = np.linspace(-50, 50, 100)
        y = np.linspace(-40, 30, 100)
        X, Y = np.meshgrid(x, y)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
        Z = 10 * np.exp(-(X**2 + Y**2) / 1000) + np.random.normal(0, 1, X.shape)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
        points = []
        for i in range(X.shape[0]):
            for j in range(X.shape[1]):
                points.append([X[i, j], Y[i, j], Z[i, j]])
        
        return np.array(points[:1000])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    def _create_obj_content(self, wireframe: bool, dense_points: bool, landmarks: bool) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ OBJ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è 3D –º–æ–¥–µ–ª–∏"""
        obj_lines = ["# 3D Face Model"]
        
        if landmarks and self.current_landmarks is not None:
            obj_lines.append("# 68 Landmarks")
            for i, point in enumerate(self.current_landmarks):
                obj_lines.append(f"v {point[0]:.3f} {point[1]:.3f} {point[2]:.3f}")
        
        if dense_points and self.current_dense_points is not None:
            obj_lines.append("# Dense Surface Points")
            for point in self.current_dense_points:
                obj_lines.append(f"v {point[0]:.3f} {point[1]:.3f} {point[2]:.3f}")
        
        return "\n".join(obj_lines)

class MetricsDashboard:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: Dashboard —Å 15 –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: 15 –º–µ—Ç—Ä–∏–∫, color-coding, correlation matrix 15x15
    """
    
    def __init__(self):
        self.metrics_data = {}
        self.correlation_matrix = None
        logger.info("MetricsDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ dashboard –º–µ—Ç—Ä–∏–∫"""
        with gr.Column() as col:
            gr.Markdown("## üìä Dashboard –º–µ—Ç—Ä–∏–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: Tabs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Ç—Ä–∏–∫
            with gr.Tabs():
                with gr.Tab("–ì–µ–æ–º–µ—Ç—Ä–∏—è —á–µ—Ä–µ–ø–∞"):
                    self.geometry_tab = self._create_geometry_tab()
                
                with gr.Tab("–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞"):
                    self.proportions_tab = self._create_proportions_tab()
                
                with gr.Tab("–ö–æ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞"):
                    self.bone_tab = self._create_bone_tab()
                
                with gr.Tab("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"):
                    self.correlation_tab = self._create_correlation_tab()
                
                with gr.Tab("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
                    self.statistics_tab = self._create_statistics_tab()
        
        return col

    def _create_geometry_tab(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —á–µ—Ä–µ–ø–∞"""
        with gr.Column() as tab:
            gr.Markdown("### üèóÔ∏è –ì–µ–æ–º–µ—Ç—Ä–∏—è —á–µ—Ä–µ–ø–∞ (5 –º–µ—Ç—Ä–∏–∫)")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: 5 –º–µ—Ç—Ä–∏–∫ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —á–µ—Ä–µ–ø–∞
            metrics_names = [
                "skull_width_ratio", "temporal_bone_angle", "zygomatic_arch_width",
                "orbital_depth", "occipital_curve"
            ]
            
            self.geometry_plots = {}
            
            for metric in metrics_names:
                with gr.Row():
                    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è —Å color-coding
                    value_indicator = gr.Number(
                        label=metric.replace("_", " ").title(),
                        precision=3,
                        interactive=False
                    )
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞
                    trend_plot = gr.Plot(
                        label=f"–¢—Ä–µ–Ω–¥ {metric}"
                    )
                    
                    self.geometry_plots[metric] = (value_indicator, trend_plot)
        
        return tab

    def _create_proportions_tab(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ª–∏—Ü–∞"""
        with gr.Column() as tab:
            gr.Markdown("### üìè –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞ (5 –º–µ—Ç—Ä–∏–∫)")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: 5 –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ª–∏—Ü–∞
            metrics_names = [
                "cephalic_index", "nasolabial_angle", "orbital_index",
                "forehead_height_ratio", "chin_projection_ratio"
            ]
            
            self.proportions_plots = {}
            
            for metric in metrics_names:
                with gr.Row():
                    value_indicator = gr.Number(
                        label=metric.replace("_", " ").title(),
                        precision=3,
                        interactive=False
                    )
                    
                    trend_plot = gr.Plot(
                        label=f"–¢—Ä–µ–Ω–¥ {metric}"
                    )
                    
                    self.proportions_plots[metric] = (value_indicator, trend_plot)
        
        return tab

    def _create_bone_tab(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–æ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        with gr.Column() as tab:
            gr.Markdown("### ü¶¥ –ö–æ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (5 –º–µ—Ç—Ä–∏–∫)")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: 5 –º–µ—Ç—Ä–∏–∫ –∫–æ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            metrics_names = [
                "interpupillary_distance_ratio", "gonial_angle_asymmetry",
                "zygomatic_angle", "jaw_angle_ratio", "mandibular_symphysis_angle"
            ]
            
            self.bone_plots = {}
            
            for metric in metrics_names:
                with gr.Row():
                    value_indicator = gr.Number(
                        label=metric.replace("_", " ").title(),
                        precision=3,
                        interactive=False
                    )
                    
                    trend_plot = gr.Plot(
                        label=f"–¢—Ä–µ–Ω–¥ {metric}"
                    )
                    
                    self.bone_plots[metric] = (value_indicator, trend_plot)
        
        return tab

    def _create_correlation_tab(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
        with gr.Column() as tab:
            gr.Markdown("### üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 15√ó15")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 15x15
            self.correlation_heatmap = gr.Plot(
                label="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫"
            )
            
            with gr.Row():
                self.correlation_threshold = gr.Slider(
                    minimum=0.0,
                    maximum=1.0,
                    value=0.7,
                    label="–ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏",
                    info="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞"
                )
                
                self.update_correlation_btn = gr.Button(
                    "–û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É",
                    variant="secondary"
                )
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.update_correlation_btn.click(
                fn=self.update_correlation_matrix,
                inputs=[self.correlation_threshold],
                outputs=[self.correlation_heatmap]
            )
        
        return tab

    def _create_statistics_tab(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with gr.Column() as tab:
            gr.Markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞")
            
            with gr.Row():
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                self.stats_summary = gr.JSON(
                    label="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
                )
                
                # Percentile ranks
                self.percentile_ranks = gr.Dataframe(
                    headers=["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ", "Percentile", "–†–∞–Ω–≥"],
                    label="Percentile —Ä–∞–Ω–≥–∏"
                )
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            self.historical_comparison = gr.Plot(
                label="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"
            )
        
        return tab

    def update_correlation_matrix(self, threshold: float) -> go.Figure:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã 15x15
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: correlation matrix 15x15 –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        """
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã —Å –ø–æ—Ä–æ–≥–æ–º {threshold}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã 15x15
            metrics_names = [
                # –ì–µ–æ–º–µ—Ç—Ä–∏—è —á–µ—Ä–µ–ø–∞ (5)
                "skull_width_ratio", "temporal_bone_angle", "zygomatic_arch_width",
                "orbital_depth", "occipital_curve",
                # –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞ (5)
                "cephalic_index", "nasolabial_angle", "orbital_index",
                "forehead_height_ratio", "chin_projection_ratio",
                # –ö–æ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (5)
                "interpupillary_distance_ratio", "gonial_angle_asymmetry",
                "zygomatic_angle", "jaw_angle_ratio", "mandibular_symphysis_angle"
            ]
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
            np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            correlation_matrix = np.random.rand(15, 15)
            correlation_matrix = (correlation_matrix + correlation_matrix.T) / 2  # –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è
            np.fill_diagonal(correlation_matrix, 1.0)  # –î–∏–∞–≥–æ–Ω–∞–ª—å = 1
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
            masked_matrix = np.where(np.abs(correlation_matrix) >= threshold, correlation_matrix, 0)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ heatmap
            fig = go.Figure(data=go.Heatmap(
                z=masked_matrix,
                x=metrics_names,
                y=metrics_names,
                colorscale='RdBu',
                zmid=0,
                text=np.round(masked_matrix, 2),
                texttemplate="%{text}",
                textfont={"size": 10},
                hoverongaps=False,
                hovertemplate="<b>%{x}</b><br><b>%{y}</b><br>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: %{z:.3f}<extra></extra>"
            ))
            
            fig.update_layout(
                title=f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ (–ø–æ—Ä–æ–≥ ‚â• {threshold})",
                xaxis_title="–ú–µ—Ç—Ä–∏–∫–∏",
                yaxis_title="–ú–µ—Ç—Ä–∏–∫–∏",
                height=600,
                width=800
            )
            
            # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–µ–π
            fig.update_xaxes(tickangle=45)
            fig.update_yaxes(tickangle=0)
            
            self.correlation_matrix = correlation_matrix
            
            return fig
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: {e}")
            return go.Figure()

class MaskDetectionDashboard:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: Dashboard –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—Å–æ–∫
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: 5 —É—Ä–æ–≤–Ω–µ–π –º–∞—Å–æ–∫, confidence scores, timeline visualization
    """
    
    def __init__(self):
        self.mask_levels = MASK_DETECTION_LEVELS
        self.detection_history = []
        logger.info("MaskDetectionDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def render(self) -> gr.Column:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ dashboard –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—Å–æ–∫"""
        with gr.Column() as col:
            gr.Markdown("## üé≠ Dashboard –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—Å–æ–∫")
            
            with gr.Row():
                # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å–∫–∏
                self.current_level = gr.Textbox(
                    label="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
                    value="Natural_Skin",
                    interactive=False
                )
                
                # Confidence score
                self.confidence_score = gr.Number(
                    label="Confidence Score",
                    precision=3,
                    interactive=False
                )
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∏—Å–∫–∞
                self.risk_indicator = gr.HTML(
                    label="–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∏—Å–∫–∞",
                    value="<div style='color: green;'>‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫</div>"
                )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: Levels 1-5 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            with gr.Accordion("üìã –£—Ä–æ–≤–Ω–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–∞—Å–æ–∫", open=False):
                self.levels_info = gr.Dataframe(
                    headers=["–£—Ä–æ–≤–µ–Ω—å", "–ì–æ–¥—ã", "Shape Error", "Entropy", "Embedding Dist", "–û–ø–∏—Å–∞–Ω–∏–µ"],
                    value=self._get_levels_data(),
                    label="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–≤–Ω–µ–π"
                )
            
            # Timeline visualization
            self.timeline_plot = gr.Plot(
                label="–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"
            )
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            with gr.Row():
                self.detection_stats = gr.JSON(
                    label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"
                )
                
                self.breakthrough_years = gr.JSON(
                    label="Breakthrough Years",
                    value={"years": [2008, 2014, 2019, 2022], "description": "–ì–æ–¥—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ä—ã–≤–æ–≤"}
                )
        
        return col

    def _get_levels_data(self) -> List[List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–≤–Ω—è—Ö –º–∞—Å–æ–∫"""
        if not self.mask_levels:
            # –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ MASK_DETECTION_LEVELS –ø—É—Å—Ç
            return [
                ["Level1_Primitive", "1999-2005", "0.6", "4.2", "0.8", "–ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Å–∫–∏"],
                ["Level2_Basic", "2006-2010", "0.4", "5.2", "0.7", "–ë–∞–∑–æ–≤—ã–µ –º–∞—Å–∫–∏"],
                ["Level3_Commercial", "2011-2015", "0.3", "6.0", "0.5", "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –º–∞—Å–∫–∏"],
                ["Level4_Professional", "2016-2020", "0.2", "6.5", "0.4", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏"],
                ["Level5_Advanced", "2021-2025", "0.15", "7.0", "0.3", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–∞—Å–∫–∏"]
            ]
        
        levels_data = []
        for level_name, level_info in self.mask_levels.items():
            years = f"{level_info['years'][0]}-{level_info['years'][1]}"
            levels_data.append([
                level_name,
                years,
                str(level_info.get('shape_error', 'N/A')),
                str(level_info.get('entropy', 'N/A')),
                str(level_info.get('embedding_dist', 'N/A')),
                level_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            ])
        
        return levels_data

    def update_detection(self, level: str, confidence: float, risk_level: str) -> Tuple[str, float, str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        try:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—Å–∫–∏: {level}, confidence={confidence}")
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞
            risk_colors = {
                "low": "green",
                "medium": "orange", 
                "high": "red",
                "critical": "darkred"
            }
            
            color = risk_colors.get(risk_level.lower(), "gray")
            risk_html = f"<div style='color: {color}; font-weight: bold;'>{risk_level.upper()} –†–ò–°–ö</div>"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.detection_history.append({
                "timestamp": datetime.now(),
                "level": level,
                "confidence": confidence,
                "risk": risk_level
            })
            
            return level, confidence, risk_html
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {e}")
            return "Error", 0.0, "<div style='color: red;'>–û—à–∏–±–∫–∞</div>"

# ==================== –ì–õ–ê–í–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° ====================

class GradioInterface:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø–æ–ª–Ω–∞—è –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    """
    
    def __init__(self, all_system_components: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GradioInterface")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        required_keys = [
            'data_processor', 'results_aggregator', 'visualization_engine',
            'face_3d_analyzer', 'embedding_analyzer', 'texture_analyzer',
            'temporal_analyzer', 'anomaly_detector', 'medical_validator',
            'data_manager', 'metrics_calculator'
        ]
        for key in required_keys:
            if key not in all_system_components or all_system_components[key] is None:
                print(f"[CRITICAL] –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{key}' –≤ all_system_components!")
                logger.critical(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{key}' –≤ all_system_components!")
                raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç '{key}' –≤ all_system_components!")

        self.data_processor = all_system_components['data_processor']
        self.results_aggregator = all_system_components['results_aggregator']
        self.visualization_engine = all_system_components['visualization_engine']

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartFileUploader –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è RealTimeAnalyzer
        smart_file_uploader_instance = SmartFileUploader(max_files=MAX_FILE_UPLOAD_COUNT)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        self.widgets = {
            "face_3d_analyzer": all_system_components['face_3d_analyzer'],
            "embedding_analyzer": all_system_components['embedding_analyzer'],
            "texture_analyzer": all_system_components['texture_analyzer'],
            "temporal_analyzer": all_system_components['temporal_analyzer'],
            "anomaly_detector": all_system_components['anomaly_detector'],
            "medical_validator": all_system_components['medical_validator'],
            "data_manager": all_system_components['data_manager'],
            "metrics_calculator": all_system_components['metrics_calculator'],
            "interactive_3d_viewer": Interactive3DViewer(),  # This widget is local to GradioInterface
            "metrics_dashboard": MetricsDashboard(), # This widget is local to GradioInterface
            "mask_detection_dashboard": MaskDetectionDashboard(), # This widget is local to GradioInterface
            "smart_file_uploader": smart_file_uploader_instance, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            "real_time_analyzer": RealTimeAnalyzer(
                data_processor=self.data_processor,
                results_aggregator=self.results_aggregator,
                smart_file_uploader=smart_file_uploader_instance # –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            ),
        }
        
        # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_cache = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
        self.session_stats = {
            "files_processed": 0,
            "analysis_started": datetime.now(),
            "total_authenticity_score": 0.0,
            "anomalies_detected": 0
        }
        
        logger.info("Interactive3DViewer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("MetricsDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("MaskDetectionDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"SmartFileUploader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ª–∏–º–∏—Ç–æ–º {MAX_FILE_UPLOAD_COUNT} —Ñ–∞–π–ª–æ–≤")
        logger.info("RealTimeAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("GradioInterface –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_interface(self) -> gr.Blocks:
        print("=== [DEBUG] GradioInterface.create_interface –≤—ã–∑–≤–∞–Ω ===")
        logger.info("=== [DEBUG] GradioInterface.create_interface –≤—ã–∑–≤–∞–Ω ===")
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        """
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ gr.Blocks –≤–º–µ—Å—Ç–æ gr.Interface
            with gr.Blocks(
                title="üîç –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ 3D –ª–∏—Ü",
                theme=gr.themes.Soft(),
                css=self._get_custom_css()
            ) as demo:
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                gr.Markdown("""
                # üîç –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ 3D –ª–∏—Ü
                ## –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
                """)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: Tabs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                with gr.Tabs():
                    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
                    with gr.Tab("üè† –ì–ª–∞–≤–Ω–∞—è"):
                        self._create_main_tab()
                    
                    # 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    with gr.Tab("üéØ 3D –ê–Ω–∞–ª–∏–∑"):
                        self._create_3d_tab()
                    
                    # Dashboard –º–µ—Ç—Ä–∏–∫
                    with gr.Tab("üìä –ú–µ—Ç—Ä–∏–∫–∏"):
                        self._create_metrics_tab()
                    
                    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–∞—Å–æ–∫
                    with gr.Tab("üé≠ –ú–∞—Å–∫–∏"):
                        self._create_mask_tab()
                    
                    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
                    with gr.Tab("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑"):
                        self._create_temporal_tab()
                    
                    # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
                    with gr.Tab("üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è"):
                        self._create_medical_tab()
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    with gr.Tab("üíæ –≠–∫—Å–ø–æ—Ä—Ç"):
                        self._create_export_tab()
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    with gr.Tab("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
                        self._create_settings_tab()
                
                # –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                gr.Markdown("""
                ---
                **–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ 3D –ª–∏—Ü v2.0** | 
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 1500 —Ñ–∞–π–ª–æ–≤ | 
                15 –º–µ—Ç—Ä–∏–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ | 
                5 —É—Ä–æ–≤–Ω–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–∞—Å–æ–∫
                """)
            
            logger.info("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return demo
            
        except Exception as e:
            print("CRITICAL ERROR –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio:", e)
            import traceback
            print(traceback.format_exc())
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return gr.Interface(
                fn=lambda x: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã",
                inputs=gr.Textbox(label="–í–≤–æ–¥"),
                outputs=gr.Textbox(label="–í—ã–≤–æ–¥"),
                title="–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            )

    def _create_main_tab(self) -> None:
        print("=== [DEBUG] GradioInterface._create_main_tab –≤—ã–∑–≤–∞–Ω ===")
        logger.info("=== [DEBUG] GradioInterface._create_main_tab –≤—ã–∑–≤–∞–Ω ===")
        print(f"[DEBUG] uploader instance: {self.widgets['smart_file_uploader']}")
        print(f"[DEBUG] analyzer instance: {self.widgets['real_time_analyzer']}")
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        with gr.Row():
            with gr.Column(scale=1):
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
                uploader_ui = self.widgets['smart_file_uploader'].create_uploader()
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
                with gr.Accordion("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞", open=False):
                    self.confidence_threshold = gr.Slider(
                        minimum=0.0,
                        maximum=1.0,
                        value=0.85,
                        label="–ü–æ—Ä–æ–≥ confidence",
                        info="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"
                    )
                    
                    self.analysis_mode = gr.Radio(
                        choices=["quick", "full"],
                        value="full",
                        label="–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞",
                        info="Quick - –±—ã—Å—Ç—Ä—ã–π, Full - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                    )
                    
                    self.export_format = gr.Radio(
                        choices=["HTML", "PDF", "JSON", "CSV"],
                        value="HTML",
                        label="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞"
                    )
            
            with gr.Column(scale=2):
                # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                analyzer_ui = self.widgets['real_time_analyzer'].create_analyzer()
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                with gr.Row():
                    self.overall_authenticity = gr.Number(
                        label="–û–±—â–∞—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å",
                        precision=3,
                        interactive=False
                    )
                    
                    self.risk_level = gr.HTML(
                        label="–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞",
                        value="<div style='color: gray;'>–û–∂–∏–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...</div>"
                    )

    def _create_3d_tab(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ 3D –∞–Ω–∞–ª–∏–∑–∞"""
        with gr.Row():
            with gr.Column(scale=2):
                # 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
                viewer_ui = self.widgets['interactive_3d_viewer'].render()
            
            with gr.Column(scale=1):
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–Ω–¥–º–∞—Ä–∫–∞—Ö
                gr.Markdown("### üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–Ω–¥–º–∞—Ä–∫–∞—Ö")
                
                self.landmarks_info = gr.JSON(
                    label="68 –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫"
                )
                
                # –ö–æ–Ω—Ç—Ä–æ–ª—ã –ø–æ–∑—ã
                gr.Markdown("### üîÑ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–∑—ã")
                
                self.pose_category = gr.Textbox(
                    label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∑—ã",
                    value="Frontal",
                    interactive=False
                )
                
                self.pose_angles = gr.JSON(
                    label="–£–≥–ª—ã –ø–æ–∑—ã (pitch, yaw, roll)",
                    value={"pitch": 0, "yaw": 0, "roll": 0}
                )

    def _create_metrics_tab(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–µ—Ç—Ä–∏–∫"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π dashboard –º–µ—Ç—Ä–∏–∫
        metrics_ui = self.widgets['metrics_dashboard'].render()

    def _create_mask_tab(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–∞—Å–æ–∫"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π dashboard –º–∞—Å–æ–∫
        mask_ui = self.widgets['mask_detection_dashboard'].render()

    def _create_temporal_tab(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        with gr.Column():
            gr.Markdown("## ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑")
            
            # Timeline –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            self.timeline_plot = gr.Plot(
                label="–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"
            )
            
            with gr.Row():
                # –ê–Ω–æ–º–∞–ª–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
                self.temporal_anomalies = gr.JSON(
                    label="–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏"
                )
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–º–µ–Ω—ã –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
                self.identity_patterns = gr.JSON(
                    label="–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–º–µ–Ω—ã –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏"
                )

    def _create_medical_tab(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        with gr.Column():
            gr.Markdown("## üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
            
            with gr.Row():
                # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä–µ–Ω–∏—è
                self.aging_consistency = gr.Number(
                    label="–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä–µ–Ω–∏—è",
                    precision=3,
                    interactive=False
                )
                
                # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ—Å—Ç–µ–π
                self.bone_stability = gr.HTML(
                    label="–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ—Å—Ç–µ–π",
                    value="<div>–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω</div>"
                )
            
            # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç
            self.medical_report = gr.HTML(
                label="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç"
            )

    def _create_export_tab(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        with gr.Column():
            gr.Markdown("## üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            with gr.Row():
                self.export_format_selector = gr.Radio(
                    choices=["CSV", "Excel", "PDF", "JSON"],
                    value="CSV",
                    label="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞"
                )
                
                self.export_btn = gr.Button(
                    "üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    variant="primary"
                )
            
            self.export_status = gr.Textbox(
                label="–°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–æ—Ä—Ç–∞",
                interactive=False
            )
            
            self.download_file = gr.File(
                label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                visible=False
            )

    def _create_settings_tab(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        with gr.Column():
            gr.Markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
            
            with gr.Accordion("üéØ –ü–æ—Ä–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞", open=True):
                self.authenticity_threshold = gr.Slider(
                    minimum=0.0,
                    maximum=1.0,
                    value=CRITICAL_THRESHOLDS.get("min_authenticity_score", 0.6),
                    label="–ü–æ—Ä–æ–≥ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏"
                )
                
                self.quality_threshold = gr.Slider(
                    minimum=0.0,
                    maximum=1.0,
                    value=0.6,
                    label="–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                )
            
            with gr.Accordion("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏", open=False):
                self.max_files = gr.Number(
                    label="–ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤",
                    value=MAX_FILE_UPLOAD_COUNT,
                    precision=0
                )
                
                self.batch_size = gr.Number(
                    label="–†–∞–∑–º–µ—Ä batch",
                    value=50,
                    precision=0
                )

    def _get_custom_css(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ CSS"""
        return """
        .gradio-container {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .risk-high {
            background-color: #ffebee;
            border-left: 4px solid #f44336;
            padding: 10px;
            margin: 5px 0;
        }
        
        .risk-medium {
            background-color: #fff3e0;
            border-left: 4px solid #ff9800;
            padding: 10px;
            margin: 5px 0;
        }
        
        .risk-low {
            background-color: #e8f5e8;
            border-left: 4px solid #4caf50;
            padding: 10px;
            margin: 5px 0;
        }
        
        .metric-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin: 10px;
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4caf50, #8bc34a);
            transition: width 0.3s ease;
        }
        """

    def launch(self, **kwargs) -> None:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
        """
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            demo = self.create_interface()
            
            # –Ø–í–ù–û –í–ö–õ–Æ–ß–ê–ï–ú –û–ß–ï–†–ï–î–¨ –î–õ–Ø GR.BLOCKS
            demo.queue()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
            demo.launch(**kwargs)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            raise

# ==================== –¢–û–ß–ö–ê –í–•–û–î–ê ====================

def create_modular_interface(all_system_components: Dict[str, Any]) -> GradioInterface:
    """Factory function to create the GradioInterface with all its components."""
    # Pass all components from the main system to the GradioInterface
    return GradioInterface(all_system_components)

def main():
    # This main is for testing GradioInterface independently, not used by main.py
    pass # Main application entry point is in main.py

if __name__ == "__main__":
    main()