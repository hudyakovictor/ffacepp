"""
InteractiveWidgets - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
–í–µ—Ä—Å–∏—è: 2.0
–î–∞—Ç–∞: 2025-06-15
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º
"""

import gradio as gr
import numpy as np
import cv2
import logging
from typing import Dict, List, Callable, Any, Optional, Tuple
import json
import asyncio
from datetime import datetime
from pathlib import Path
import pickle

# --- –¶–í–ï–¢–ê –ö–û–ù–°–û–õ–ò (–ü–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –±—ã—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏) ---
class Colors:
    RESET = "\033[0m"
    BOLD = "\033[1m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    CYAN = "\033[96m"
    BLUE = "\033[94m"
    PURPLE = "\033[95m"
    WHITE = "\033[97m"

# --- –ö–ê–°–¢–û–ú–ù–´–ô –§–û–†–ú–ê–¢–¢–ï–† –î–õ–Ø –¶–í–ï–¢–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
class ColoredFormatter(logging.Formatter):
    FORMATS = {
        logging.DEBUG: f"{Colors.CYAN}%(levelname)s:{Colors.RESET} %(message)s",
        logging.INFO: f"{Colors.GREEN}%(levelname)s:{Colors.RESET} %(message)s",
        logging.WARNING: f"{Colors.YELLOW}%(levelname)s:{Colors.RESET} %(message)s",
        logging.ERROR: f"{Colors.RED}%(levelname)s:{Colors.RESET} %(message)s",
        logging.CRITICAL: f"{Colors.RED}{Colors.BOLD}%(levelname)s:{Colors.RESET} %(message)s"
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file_handler = logging.FileHandler('logs/interactivewidgets.log')
log_file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'))

console_handler = logging.StreamHandler()
console_handler.setFormatter(ColoredFormatter())

logging.basicConfig(
    level=logging.INFO,
    handlers=[
        log_file_handler,
        console_handler
    ]
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from core_config import (
        MAX_FILE_UPLOAD_COUNT, AUTHENTICITY_WEIGHTS, CRITICAL_THRESHOLDS,
        CACHE_DIR, ERROR_CODES
    )
    logger.info(f"{Colors.GREEN}‚úî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞.{Colors.RESET}")
except ImportError as e:
    logger.critical(f"{Colors.RED}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}{Colors.RESET}")
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    MAX_FILE_UPLOAD_COUNT = 1500
    AUTHENTICITY_WEIGHTS = {"geometry": 0.15, "embedding": 0.30, "texture": 0.10}
    CRITICAL_THRESHOLDS = {"min_authenticity_score": 0.6}
    CACHE_DIR = Path("cache")
    ERROR_CODES = {"E001": "NO_FACE_DETECTED", "E002": "LOW_QUALITY_IMAGE"}

# ==================== SMART FILE UPLOADER ====================

class SmartFileUploader:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 1500 —Ñ–∞–π–ª–æ–≤ —Å E002 –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    
    def __init__(self, max_files: int = MAX_FILE_UPLOAD_COUNT):
        self.max_files = max_files
        self.uploaded_files = []
        self.analysis_queue = []
        self.quality_cache = {}
        logger.info(f"{Colors.BOLD}--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartFileUploader (–ó–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤) —Å –ª–∏–º–∏—Ç–æ–º: {max_files} —Ñ–∞–π–ª–æ–≤ ---{Colors.RESET}")

    def create_uploader(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        logger.info(f"{Colors.CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...{Colors.RESET}")
        with gr.Column() as col:
            gr.Markdown(f"### üìÅ –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–º–∞–∫—Å. {self.max_files})")
            
            self.file_upload = gr.File(
                file_count="multiple",
                file_types=[".jpg", ".jpeg", ".png"],
                label=f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞–∫—Å. {self.max_files})",
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç height —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º Gradio
            )
            
            with gr.Row():
                self.upload_progress = gr.Progress()
                self.upload_status = gr.Textbox(
                    label="–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏",
                    interactive=False,
                    lines=3
                )
            
            self.preview_gallery = gr.Gallery(
                label="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä",
                columns=5,
                rows=2,
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç height —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º Gradio
                allow_preview=True
            )
            
            with gr.Row():
                self.quality_filter = gr.Slider(
                    minimum=0.0,
                    maximum=1.0,
                    value=0.6,
                    label="–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞",
                    info="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                self.auto_enhance = gr.Checkbox(
                    label="–ê–≤—Ç–æ—É–ª—É—á—à–µ–Ω–∏–µ",
                    value=True,
                    info="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"
                )
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.file_upload.change(
                fn=self.process_uploaded_files,
                inputs=[self.file_upload, self.quality_filter],
                outputs=[self.upload_status, self.preview_gallery]
            )
        
        logger.info(f"{Colors.GREEN}‚úî –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.{Colors.RESET}")
        return col

    def process_uploaded_files(self, files: List[str], quality_threshold: float) -> Tuple[str, List[str]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ E002 –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        if not files:
            logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ù–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ.{Colors.RESET}")
            return "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã", []
        
        try:
            logger.info(f"{Colors.CYAN}–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(files)} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...{Colors.RESET}")
            
            if len(files) > self.max_files:
                logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(files)}, –∞ –ª–∏–º–∏—Ç: {self.max_files}.{Colors.RESET}")
                return f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: {len(files)} > {self.max_files}", []
            
            results = {
                "total_files": len(files),
                "valid_files": [],
                "invalid_files": [],
                "quality_scores": {}
            }
            
            for file_path in files:
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    quality_score = self.assess_image_quality(file_path)
                    results["quality_scores"][file_path] = quality_score
                    
                    if quality_score >= quality_threshold:
                        results["valid_files"].append(file_path)
                    else:
                        results["invalid_files"].append(file_path)
                        logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª '{Path(file_path).name}' –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ ({quality_score:.3f} < {quality_threshold:.3f}). –ë—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω (–ö–æ–¥: E002).{Colors.RESET}")
                
                except Exception as e:
                    logger.error(f"{Colors.RED}–û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ '{Path(file_path).name}': {e}{Colors.RESET}")
                    results["invalid_files"].append(file_path)
            
            self.uploaded_files = results["valid_files"]
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_lines = [
                f"{Colors.BOLD}--- –°–≤–æ–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---{Colors.RESET}",
                f"‚úÖ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {results['total_files']}",
                f"üü¢ –ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞: {len(results['valid_files'])}",
                f"üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω—ã (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ): {len(results['invalid_files'])}"
            ]
            
            if results["quality_scores"]:
                status_lines.append(f"üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ (–ø—Ä–æ—à–µ–¥—à–∏—Ö): {np.mean([score for f, score in results['quality_scores'].items() if f in results['valid_files']]):.3f}")
            
            if results["invalid_files"]:
                status_lines.append(f"{Colors.YELLOW}–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö (–ø–µ—Ä–≤—ã–µ 5):{Colors.RESET}")
                for f in results["invalid_files"][:5]:
                    status_lines.append(f"  - {Path(f).name} (–ë–∞–ª–ª: {results['quality_scores'].get(f, 0.0):.3f})")
                if len(results["invalid_files"]) > 5:
                    status_lines.append(f"... –∏ –µ—â–µ {len(results['invalid_files']) - 5} —Ñ–∞–π–ª–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º.")
            
            status = "\n".join(status_lines)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–µ—Ä–≤—ã–µ 10 –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
            preview_images = results["valid_files"][:10]
            
            logger.info(f"{Colors.GREEN}‚úî –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞–ª–∏–¥–Ω—ã—Ö: {len(results['valid_files'])}{Colors.RESET}")
            return status, preview_images
            
        except Exception as e:
            logger.critical(f"{Colors.RED}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}{Colors.RESET}")
            return f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", []

    def assess_image_quality(self, filepath: str) -> float:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: blur_score, noise_level, min_face_size
        """
        if filepath in self.quality_cache:
            logger.debug(f"–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {Path(filepath).name} –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç.")
            return self.quality_cache[filepath]
        
        try:
            image = cv2.imread(filepath)
            if image is None:
                logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏: {filepath}. –ö–∞—á–µ—Å—Ç–≤–æ 0.0.{Colors.RESET}")
                return 0.0
            
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            h, w = gray.shape
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            resolution_score = 1.0 if w >= 200 and h >= 200 else 0.5
            logger.debug(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {w}x{h}, –±–∞–ª–ª: {resolution_score:.2f}")
            
            # 2. –ò–°–ü–†–ê–í–õ–ï–ù–û: Blur score (Laplacian variance)
            blur_score = cv2.Laplacian(gray, cv2.CV_64F).var()
            blur_quality = 1.0 if blur_score >= 100 else max(0.0, blur_score / 150.0)
            logger.debug(f"–†–∞–∑–º—ã—Ç–æ—Å—Ç—å (Laplacian) {blur_score:.2f}, –±–∞–ª–ª: {blur_quality:.2f}")
            
            # 3. –ò–°–ü–†–ê–í–õ–ï–ù–û: Noise level
            noise_level = np.std(gray)
            noise_quality = 1.0 if noise_level >= 10 else max(0.0, noise_level / 10.0)
            logger.debug(f"–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ {noise_level:.2f}, –±–∞–ª–ª: {noise_quality:.2f}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–∏—Ü–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            face_detected = True # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ FaceBoxes –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            face_quality = 1.0 if face_detected else 0.0
            if not face_detected:
                logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {filepath}.{Colors.RESET}")

            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
            overall_quality = (resolution_score + blur_quality + noise_quality + face_quality) / 4.0
            
            self.quality_cache[filepath] = overall_quality
            logger.debug(f"–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è '{Path(filepath).name}' —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ: {overall_quality:.3f}")
            return overall_quality
            
        except Exception as e:
            logger.error(f"{Colors.RED}–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filepath}: {e}{Colors.RESET}")
            self.quality_cache[filepath] = 0.0 # –ö—ç—à–∏—Ä—É–µ–º 0.0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return 0.0

# ==================== REAL-TIME ANALYZER ====================

class RealTimeAnalyzer:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: realtime_analysis_with_progress
    """
    
    def __init__(self):
        self.data_processor = None # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞
        self.is_running = False
        logger.info(f"{Colors.BOLD}--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RealTimeAnalyzer (–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏) ---{Colors.RESET}")

    def create_analyzer(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info(f"{Colors.CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Real-Time Analyzer...{Colors.RESET}")
        with gr.Column() as col:
            gr.Markdown("### ‚ö° –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            
            self.realtime_input = gr.Image(type="filepath", label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫", interactive=True)
            
            with gr.Row():
                self.start_button = gr.Button("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", variant="primary")
                self.stop_button = gr.Button("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
            
            self.realtime_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å Real-Time –ê–Ω–∞–ª–∏–∑–∞", interactive=False, lines=3)
            self.realtime_authenticity = gr.Number(label="–ë–∞–ª–ª –ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏", interactive=False)
            self.realtime_anomalies = gr.JSON(label="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏",
                                           # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç height
                                           )

            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.start_button.click(
                fn=self.start_analysis,
                outputs=[self.realtime_status, self.realtime_authenticity, self.realtime_anomalies]
            )
            self.stop_button.click(
                fn=self.stop_analysis,
                outputs=[self.realtime_status]
            )
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å –∫–∞–º–µ—Ä—ã –∏–ª–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ input
        logger.info(f"{Colors.GREEN}‚úî –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Real-Time Analyzer —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.{Colors.RESET}")
        return col

    def start_analysis(self) -> Tuple[str, float, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if self.is_running:
            logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.{Colors.RESET}")
            return "–ê–Ω–∞–ª–∏–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", 0.0, {}
        
        try:
            logger.info(f"{Colors.CYAN}–ó–∞–ø—É—Å–∫ Real-Time –∞–Ω–∞–ª–∏–∑–∞...{Colors.RESET}")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataProcessor –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if self.data_processor is None:
                from data_processing import DataProcessor
                self.data_processor = DataProcessor()
                logger.info(f"{Colors.GREEN}DataProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Real-Time –∞–Ω–∞–ª–∏–∑–∞.{Colors.RESET}")
            
            self.is_running = True
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤
            status = "–ó–∞–ø—É—â–µ–Ω Real-Time –∞–Ω–∞–ª–∏–∑. –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..." # –≠—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            authenticity_score = 0.0 # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
            anomalies = {} # –ë—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
            
            logger.info(f"{Colors.GREEN}‚úî Real-Time –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.{Colors.RESET}")
            return status, authenticity_score, anomalies
            
        except Exception as e:
            logger.critical(f"{Colors.RED}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Real-Time –∞–Ω–∞–ª–∏–∑–∞: {e}{Colors.RESET}")
            self.is_running = False
            return f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑: {str(e)}", 0.0, {}

    def stop_analysis(self) -> str:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.is_running:
            logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Real-Time –∞–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω.{Colors.RESET}")
            return "–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω."
        
        self.is_running = False
        logger.info(f"{Colors.GREEN}‚úî Real-Time –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.{Colors.RESET}")
        return "Real-Time –∞–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

# ==================== INTERACTIVE COMPARISON ====================

class InteractiveComparison:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: updatecomparison —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º resultfromdb
    """
    
    def __init__(self):
        self.data_processor = None
        logger.info(f"{Colors.BOLD}--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InteractiveComparison (–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è) ---{Colors.RESET}")

    def create_comparison_widget(self) -> gr.Column:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        logger.info(f"{Colors.CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...{Colors.RESET}")
        with gr.Column() as col:
            gr.Markdown("### üîÑ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
            
            with gr.Row():
                self.file_selector_1 = gr.Dropdown(label="–§–∞–π–ª 1", choices=[], interactive=True)
                self.file_selector_2 = gr.Dropdown(label="–§–∞–π–ª 2", choices=[], interactive=True)
            
            self.comparison_slider = gr.Slider(
                minimum=0.0, maximum=1.0, value=0.5, label="–î–æ–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è",
                info="–ü–µ—Ä–µ–º–µ—â–∞–π—Ç–µ –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è 2D –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)"
            )
            
            with gr.Row():
                self.comparison_output = gr.Image(label="–°–º–µ—à–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", interactive=False, height=400)
                self.similarity_score = gr.Number(label="–ë–∞–ª–ª —Å—Ö–æ–∂–µ—Å—Ç–∏", interactive=False)
            
            self.comparison_details = gr.JSON(
                label="–î–µ—Ç–∞–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–º–µ—Ç—Ä–∏–∫)",
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç height
            )
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è choices –¥–ª—è file_selector_1 –∏ 2
            # –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç DataProcessor.uploaded_files
            
            self.comparison_slider.change(
                fn=self.update_comparison,
                inputs=[self.comparison_slider, self.file_selector_1, self.file_selector_2],
                outputs=[self.comparison_output, self.similarity_score, self.comparison_details]
            )
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            self.file_selector_1.update(choices=["sample1.jpg", "sample2.jpg", "sample3.jpg"], value="sample1.jpg")
            self.file_selector_2.update(choices=["sample1.jpg", "sample2.jpg", "sample3.jpg"], value="sample2.jpg")

        logger.info(f"{Colors.GREEN}‚úî –í–∏–¥–∂–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.{Colors.RESET}")
        return col

    def update_comparison(self, slider_value: float, file1_path: Optional[str], file2_path: Optional[str]) -> Tuple[Any, float, Dict[str, Any]]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º result_from_db
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: blend_images –∏ calculate_metrics_similarity
        """
        if not file1_path or not file2_path:
            logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.{Colors.RESET}")
            return None, 0.0, {f"{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.{Colors.RESET}"}
        
        try:
            logger.info(f"{Colors.CYAN}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {Path(file1_path).name} vs {Path(file2_path).name} (—Å–º–µ—à–∏–≤–∞–Ω–∏–µ: {slider_value:.2f})...{Colors.RESET}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataProcessor –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
            if self.data_processor is None:
                from data_processing import DataProcessor
                self.data_processor = DataProcessor()
                logger.info(f"{Colors.GREEN}DataProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.{Colors.RESET}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
            image1 = cv2.imread(file1_path)
            image2 = cv2.imread(file2_path)
            
            if image1 is None or image2 is None:
                logger.error(f"{Colors.RED}–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ({Path(file1_path).name}, {Path(file2_path).name}).{Colors.RESET}")
                return None, 0.0, {f"{Colors.RED}–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.{Colors.RESET}"}
            
            # –°–º–µ—à–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            blended_image = self._blend_images(image1, image2, slider_value)
            
            # –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫ (–ø–æ–ª—É—á–∞–µ–º –∏–∑ result_from_db)
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π DB, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
            metrics1 = {
                "skull_width_ratio": 0.75 + np.random.normal(0, 0.01),
                "cephalic_index": 78.5 + np.random.normal(0, 0.5),
                "interpupillary_distance_ratio": 0.32 + np.random.normal(0, 0.005)
            }
            metrics2 = {
                "skull_width_ratio": 0.75 + np.random.normal(0, 0.01),
                "cephalic_index": 78.5 + np.random.normal(0, 0.5),
                "interpupillary_distance_ratio": 0.32 + np.random.normal(0, 0.005)
            }
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: metrics1 = self.data_processor.get_result_from_db(file1_path).metrics
            #                     metrics2 = self.data_processor.get_result_from_db(file2_path).metrics
            
            if self.data_processor and self.data_processor.metrics_calculator:
                similarity_result = self.data_processor.metrics_calculator.calculate_metrics_similarity(metrics1, metrics2)
                similarity_score = similarity_result["similarity"]
                comparison_details = similarity_result
            else:
                similarity_score = 0.5 # –ó–∞–≥–ª—É—à–∫–∞
                comparison_details = {f"{Colors.YELLOW}–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.{Colors.RESET}"}
                logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–≥–ª—É—à–µ–Ω–Ω—ã–º.{Colors.RESET}")
            
            logger.info(f"{Colors.GREEN}‚úî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –°—Ö–æ–∂–µ—Å—Ç—å: {similarity_score:.3f}{Colors.RESET}")
            return blended_image, similarity_score, comparison_details
            
        except Exception as e:
            logger.critical(f"{Colors.RED}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}{Colors.RESET}")
            return None, 0.0, {f"{Colors.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {str(e)}{Colors.RESET}"}

    def _blend_images(self, img1: np.ndarray, img2: np.ndarray, alpha: float) -> np.ndarray:
        """–°–º–µ—à–∏–≤–∞–Ω–∏–µ –¥–≤—É—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        h1, w1 = img1.shape[:2]
        h2, w2 = img2.shape[:2]
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if h1 != h2 or w1 != w2:
            img2_resized = cv2.resize(img2, (w1, h1), interpolation=cv2.INTER_AREA)
            logger.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2 –∏–∑–º–µ–Ω–µ–Ω–æ –¥–æ {w1}x{h1} –¥–ª—è —Å–º–µ—à–∏–≤–∞–Ω–∏—è.")
        else:
            img2_resized = img2
            
        blended = cv2.addWeighted(img1, alpha, img2_resized, 1 - alpha, 0)
        return blended

# ==================== ADVANCED SEARCH ====================

class AdvancedSearch:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ, –±–∞–ª–ª–∞–º, –∞–Ω–æ–º–∞–ª–∏—è–º, –∫–∞—á–µ—Å—Ç–≤—É
    """
    
    def __init__(self):
        self.results_aggregator = None # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        logger.info(f"{Colors.BOLD}--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AdvancedSearch (–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞) ---{Colors.RESET}")

    def create_search_interface(self) -> gr.Column:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –≤—Å–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
        """
        logger.info(f"{Colors.CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...{Colors.RESET}")
        with gr.Column() as col:
            gr.Markdown("### üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
            
            self.search_query = gr.Textbox(label="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è —Ñ–∞–π–ª–∞)", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...")
            
            with gr.Row():
                self.date_from = gr.Textbox(label="–î–∞—Ç–∞ –æ—Ç (–ì–ì–ì–ì-–ú–ú-–î–î)", placeholder="2023-01-01")
                self.date_to = gr.Textbox(label="–î–∞—Ç–∞ –¥–æ (–ì–ì–ì–ì-–ú–ú-–î–î)", placeholder="2024-12-31")
            
            with gr.Row():
                self.authenticity_range = gr.Slider(minimum=0.0, maximum=1.0, value=[0.0, 1.0], label="–î–∏–∞–ø–∞–∑–æ–Ω –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏")
                self.has_anomalies = gr.Radio(choices=["–í—Å–µ", "–î–∞", "–ù–µ—Ç"], value="–í—Å–µ", label="–ù–∞–ª–∏—á–∏–µ –∞–Ω–æ–º–∞–ª–∏–π")
                self.quality_threshold = gr.Slider(minimum=0.0, maximum=1.0, value=0.5, label="–ú–∏–Ω. –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            self.search_button = gr.Button("–ù–∞–π—Ç–∏", variant="primary")
            self.search_results_gallery = gr.Gallery(label="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", columns=4, rows=2, height=300, allow_preview=True)
            self.search_status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞", interactive=False, lines=2)

            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.search_button.click(
                fn=self.perform_search,
                inputs=[
                    self.search_query, self.date_from, self.date_to,
                    self.authenticity_range, self.has_anomalies, self.quality_threshold
                ],
                outputs=[self.search_results_gallery, self.search_status]
            )
            
        logger.info(f"{Colors.GREEN}‚úî –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.{Colors.RESET}")
        return col

    def perform_search(self, query: str, date_from: Optional[str], date_to: Optional[str],
                      authenticity_range: List[float], has_anomalies: str, 
                      quality_threshold: float) -> Tuple[List[str], str]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        """
        try:
            logger.info(f"{Colors.CYAN}–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}' (–∞–Ω–æ–º–∞–ª–∏–∏: {has_anomalies})...{Colors.RESET}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ResultsAggregator –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
            if self.results_aggregator is None:
                from data_processing import ResultsAggregator
                self.results_aggregator = ResultsAggregator()
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
                self.results_aggregator.add_results(self.results_aggregator.load_results_from_cache().values()) # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞
                logger.info(f"{Colors.GREEN}ResultsAggregator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.{Colors.RESET}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            parsed_date_range = None
            if date_from and date_to:
                try:
                    parsed_date_range = (datetime.strptime(date_from, '%Y-%m-%d').isoformat(), 
                                         datetime.strptime(date_to, '%Y-%m-%d').isoformat())
                except ValueError:
                    logger.warning(f"{Colors.YELLOW}–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω.{Colors.RESET}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ has_anomalies
            has_anomalies_bool: Optional[bool] = None
            if has_anomalies == "–î–∞":
                has_anomalies_bool = True
            elif has_anomalies == "–ù–µ—Ç":
                has_anomalies_bool = False

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            filtered_results = self.results_aggregator.filter_results(
                authenticity_range=authenticity_range,
                has_anomalies=has_anomalies_bool,
                date_range=parsed_date_range
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ –∫–∞—á–µ—Å—Ç–≤—É
            final_results = []
            for res in filtered_results:
                # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ filepath (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                if query.lower() in res.filepath.lower():
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
                    if res.metadata.get("quality_score", 0.0) >= quality_threshold:
                        final_results.append(res.filepath)
            
            status = f"–ù–∞–π–¥–µ–Ω–æ: {len(final_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤." if final_results else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            logger.info(f"{Colors.GREEN}‚úî –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {len(final_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.{Colors.RESET}")
            return final_results, status
            
        except Exception as e:
            logger.critical(f"{Colors.RED}–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}{Colors.RESET}")
            return [], f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"

# ==================== AI ASSISTANT ====================

class AIAssistant:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: generate_response –∏ explain_anomalies, explain_results
    """
    
    def __init__(self):
        self.history = []
        logger.info(f"{Colors.BOLD}--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AIAssistant (AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞) ---{Colors.RESET}")

    def create_assistant_interface(self) -> gr.Column:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        logger.info(f"{Colors.CYAN}–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...{Colors.RESET}")
        with gr.Column() as col:
            gr.Markdown("### ü§ñ AI-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
            
            self.chatbot = gr.Chatbot(
                label="–ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º",
                height=400
            )
            self.message_input = gr.Textbox(label="–í–∞—à –≤–æ–ø—Ä–æ—Å", placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º-–Ω–∏–±—É–¥—å...")
            
            with gr.Row():
                self.send_button = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary")
                self.clear_chat_button = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
            
            gr.Markdown("#### –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
            with gr.Row():
                self.quick_question_1 = gr.Button("–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–æ–º–∞–ª–∏–∏?")
                self.quick_question_2 = gr.Button("–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?")
                self.quick_question_3 = gr.Button("–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è?")
                self.quick_question_4 = gr.Button("–ù–∞—Å–∫–æ–ª—å–∫–æ –Ω–∞–¥–µ–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞?")
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.message_input.submit(
                fn=self.process_user_question,
                inputs=[self.message_input, self.chatbot],
                outputs=[self.message_input, self.chatbot]
            )
            self.send_button.click(
                fn=self.process_user_question,
                inputs=[self.message_input, self.chatbot],
                outputs=[self.message_input, self.chatbot]
            )
            self.clear_chat_button.click(
                fn=lambda: ([], None),  # –û—á–∏—â–∞–µ–º —á–∞—Ç –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                outputs=[self.chatbot, self.message_input]
            )
            
            self.quick_question_1.click(self.handle_quick_question, inputs=[self.quick_question_1, self.chatbot], outputs=[self.chatbot, self.message_input])
            self.quick_question_2.click(self.handle_quick_question, inputs=[self.quick_question_2, self.chatbot], outputs=[self.chatbot, self.message_input])
            self.quick_question_3.click(self.handle_quick_question, inputs=[self.quick_question_3, self.chatbot], outputs=[self.chatbot, self.message_input])
            self.quick_question_4.click(self.handle_quick_question, inputs=[self.quick_question_4, self.chatbot], outputs=[self.chatbot, self.message_input])

        logger.info(f"{Colors.GREEN}‚úî –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.{Colors.RESET}")
        return col

    def process_user_question(self, question: str, chat_history: List[List[str]]) -> Tuple[List[List[str]], str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ AI.
        """
        logger.info(f"{Colors.CYAN}–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{question}'{Colors.RESET}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history.append([question, None])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
        response = self.generate_response(question)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history[-1][1] = response
        
        logger.info(f"{Colors.GREEN}‚úî –û—Ç–≤–µ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.{Colors.RESET}")
        return chat_history, ""

    def generate_response(self, question: str) -> str:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞
        –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∫–∞–º: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        question = question.lower().strip()
        
        if "–∞–Ω–æ–º–∞–ª" in question:
            response = self.explain_anomalies()
        elif "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" in question or "–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å" in question:
            response = self.explain_results()
        elif "–º–µ—Ç—Ä–∏–∫" in question or "–∏–∑–º–µ—Ä—è" in question or "–≤—ã—á–∏—Å–ª—è" in question:
            response = self.explain_metrics()
        elif "–Ω–∞–¥–µ–∂–Ω" in question or "–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω" in question or "—Ç–æ—á–Ω–æ—Å—Ç—å" in question:
            response = self.explain_reliability()
        elif "–∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å" in question or "–ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å" in question:
            response = self.explain_authenticity()
        elif "–ø—Ä–∏–≤–µ—Ç" in question or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in question:
            response = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        elif "–∫–∞–∫ –¥–µ–ª–∞" in question or "–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞" in question:
            response = "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã."
        else:
            response = self.general_help()
            
        return response

    def explain_anomalies(self) -> str:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ, —á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–æ–º–∞–ª–∏–∏.
        """
        logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π.")
        return (
            "–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–Ω–∞–ª–∏–∑–∞ 3D-–º–æ–¥–µ–ª–µ–π –ª–∏—Ü–∞, **–∞–Ω–æ–º–∞–ª–∏–∏** ‚Äî —ç—Ç–æ –ª—é–±—ã–µ –Ω–µ–æ–±—ã—á–Ω—ã–µ "
            "–∏–ª–∏ –Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –Ω–æ—Ä–º. "
            "–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–∫–∞–∂–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞, —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–æ–∂–∏, "
            "–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∏–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–∏, –∏–ª–∏ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ "
            "–∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å "
            "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º." 
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç, —á—Ç–æ –ª–∏—Ü–æ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–º—ã—Ç–æ, —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∞–Ω–æ–º–∞–ª–∏—è –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞." 
            "–ò–ª–∏ –µ—Å–ª–∏ –º–µ—Ç—Ä–∏–∫–∏ 3D-—Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —ç—Ç–æ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–Ω–æ–º–∞–ª–∏–µ–π." 
            "–¶–µ–ª—å - –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ª—é–±—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö." 
        )

    def explain_results(self) -> str:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∫–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.
        """
        logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return (
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É 3D-–º–æ–¥–µ–ª–∏ –ª–∏—Ü–∞. "
            "–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å ‚Äî **–±–∞–ª–ª –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏** (Authenticity Score), "
            "–∫–æ—Ç–æ—Ä—ã–π –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç 0 –¥–æ 1, –≥–¥–µ 1 –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å. "
            "–¢–∞–∫–∂–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ **–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π** —Å –∫–æ–¥–∞–º–∏ –æ—à–∏–±–æ–∫, "
            "–∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `E001` - –ª–∏—Ü–æ "
            "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, `E002` - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è). "
            "–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è **–º–µ—Ç—Ä–∏–∫–∏** (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –º–µ—Ç—Ä–∏–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏), "
            "–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ª–∏—Ü–∞ (–≥–µ–æ–º–µ—Ç—Ä–∏—é —á–µ—Ä–µ–ø–∞, –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, "
            "–∫–æ—Å—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É). –ß–µ–º –≤—ã—à–µ –±–∞–ª–ª –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –º–µ–Ω—å—à–µ –∞–Ω–æ–º–∞–ª–∏–π, "
            "—Ç–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç." 
            "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –æ–Ω–∏ –º–æ–≥—É—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –∞—Å–ø–µ–∫—Ç—ã –ª–∏—Ü–∞ –Ω–µ–æ–±—ã—á–Ω—ã." 
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∏–∑–∫–∏–π –±–∞–ª–ª –ø–æ 'cephalic_index' –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—É—é —Ñ–æ—Ä–º—É –≥–æ–ª–æ–≤—ã." 
        )

    def explain_metrics(self) -> str:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∫–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è.
        """
        logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫.")
        return (
            "–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç 15 –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞, "
            "—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç—Ä–∏ –≥—Ä—É–ø–ø—ã: "
            "1. **–ì–µ–æ–º–µ—Ç—Ä–∏—è —á–µ—Ä–µ–ø–∞**: —à–∏—Ä–∏–Ω–∞ —á–µ—Ä–µ–ø–∞, —É–≥–æ–ª –≤–∏—Å–æ—á–Ω–æ–π –∫–æ—Å—Ç–∏, "
            "—à–∏—Ä–∏–Ω–∞ —Å–∫—É–ª–æ–≤—ã—Ö –¥—É–≥, –≥–ª—É–±–∏–Ω–∞ –æ—Ä–±–∏—Ç, –∫—Ä–∏–≤–∏–∑–Ω–∞ –∑–∞—Ç—ã–ª–æ—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏. "
            "2. **–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞**: —á–µ—Ä–µ–ø–Ω–æ–π –∏–Ω–¥–µ–∫—Å, –Ω–æ—Å–æ–≥—É–±–Ω—ã–π —É–≥–æ–ª, –æ—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π "
            "–∏–Ω–¥–µ–∫—Å, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ª–±–∞ –∫ –≤—ã—Å–æ—Ç–µ –ª–∏—Ü–∞, –≤—ã—Å—Ç—É–ø–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞. "
            "3. **–ö–æ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞**: –º–µ–∂–∑—Ä–∞—á–∫–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∞—Å–∏–º–º–µ—Ç—Ä–∏—è —É–≥–ª–æ–≤ "
            "–Ω–∏–∂–Ω–µ–π —á–µ–ª—é—Å—Ç–∏, —É–≥–æ–ª —Å–∫—É–ª–æ–≤–æ–π –∫–æ—Å—Ç–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É–≥–ª–æ–≤ —á–µ–ª—é—Å—Ç–∏, "
            "—É–≥–æ–ª —Å–∏–º—Ñ–∏–∑–∞ –Ω–∏–∂–Ω–µ–π —á–µ–ª—é—Å—Ç–∏. "
            "–≠—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å 3D-—Ñ–æ—Ä–º—É –ª–∏—Ü–∞." 
            "–ö–∞–∂–¥–∞—è –º–µ—Ç—Ä–∏–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞, —á—Ç–æ–±—ã –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —Å—Ä–∞–≤–Ω–∏–º—ã–º." 
            "–ù–∞–ø—Ä–∏–º–µ—Ä, 'interpupillary_distance_ratio' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —à–∏—Ä–æ–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≥–ª–∞–∑–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —à–∏—Ä–∏–Ω—ã –ª–∏—Ü–∞." 
        )

    def explain_reliability(self) -> str:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.
        """
        logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.")
        return (
            "–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ "
            "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ 3D-–º–æ–¥–µ–ª–µ–π –ª–∏—Ü–∞. "
            "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö: "
            "- **–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑**: –ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ 2D-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –∏ 3D-–≥–µ–æ–º–µ—Ç—Ä–∏—é, "
            "—Ç–µ–∫—Å—Ç—É—Ä—É –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ª–∏—Ü–∞, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º –∏ —É—Å—Ç–æ–π—á–∏–≤—ã–º –∫ "
            "–º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º. "
            "- **–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 15 –º–µ—Ç—Ä–∏–∫ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ "
            "–ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –ª–∏—Ü–µ. "
            "- **–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ**: –ú–æ–¥–µ–ª–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ "
            "–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏ —É–ª—É—á—à–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π. "
            "- **–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π**: –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ –≤—ã—è–≤–ª—è–µ—Ç –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö, "
            "–ø–æ–º–æ–≥–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. "
            "–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤—ã—Å–æ–∫—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –Ω–∏ –æ–¥–Ω–∞ "
            "—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–∞. –í—Å–µ–≥–¥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π." 
        )

    def explain_authenticity(self) -> str:
        """
        –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏—è 'Authenticity Score'.
        """
        logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–∞–ª–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏.")
        return (
            "**–ë–∞–ª–ª –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ (Authenticity Score)** - —ç—Ç–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1, "
            "–∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–µ 3D-–ª–∏—Ü–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "
            "–æ–∂–∏–¥–∞–µ–º—ã–º '—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º' —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º. "
            "- –ë–∞–ª–ª –±–ª–∏–∑–∫–∏–π –∫ 1: –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å, —Ç–æ –µ—Å—Ç—å –ª–∏—Ü–æ –≤—ã–≥–ª—è–¥–∏—Ç "
            "–æ—á–µ–Ω—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ "
            "–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è. "
            "- –ë–∞–ª–ª –±–ª–∏–∑–∫–∏–π –∫ 0: —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∏–∑–∫—É—é –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ –º–æ–∂–µ—Ç "
            "–≥–æ–≤–æ—Ä–∏—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π, –∏—Å–∫–∞–∂–µ–Ω–∏–π –∏–ª–∏ –æ —Ç–æ–º, —á—Ç–æ "
            "–ø–µ—Ä–µ–¥ –Ω–∞–º–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ. "
            "–≠—Ç–æ—Ç –±–∞–ª–ª —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫, "
            "–≤–∫–ª—é—á–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—é, —Ç–µ–∫—Å—Ç—É—Ä—É –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞." 
            "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Å—É–º–º—É, –≥–¥–µ –∫–∞–∂–¥–∞—è –∏–∑ 15 –º–µ—Ç—Ä–∏–∫ –≤–Ω–æ—Å–∏—Ç —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª." 
        )

    def general_help(self) -> str:
        """
        –û–±—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏.
        """
        logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: –û–±—â–∞—è –ø–æ–º–æ—â—å.")
        return (
            "–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã "
            "–∞–Ω–∞–ª–∏–∑–∞ 3D-–º–æ–¥–µ–ª–µ–π –ª–∏—Ü–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –æ: "
            "- –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–æ–º–∞–ª–∏–∏?" 
            "- –ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?" 
            "- –ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è?" 
            "- –ù–∞—Å–∫–æ–ª—å–∫–æ –Ω–∞–¥–µ–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞?" 
            "- –ß—Ç–æ —Ç–∞–∫–æ–µ –±–∞–ª–ª –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏?" 
            "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ '–ë—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'."
        )

    def handle_quick_question(self, selected_question: str, chat_history: List[List[str]]) -> List[List[str]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
        """
        logger.info(f"{Colors.CYAN}–ü–æ–ª—É—á–µ–Ω –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å: '{selected_question}'{Colors.RESET}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history.append([selected_question, None])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = self.generate_response(selected_question)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history[-1][1] = response
        
        logger.info(f"{Colors.GREEN}‚úî –û—Ç–≤–µ—Ç –Ω–∞ –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.{Colors.RESET}")
        return chat_history, ""

def create_interactive_widgets() -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤.
    """
    logger.info(f"{Colors.BOLD}--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ ---{Colors.RESET}")
    
    widgets = {
        "file_uploader": SmartFileUploader().create_uploader(),
        "realtime_analyzer": RealTimeAnalyzer().create_analyzer(),
        "interactive_comparison": InteractiveComparison().create_comparison_widget(),
        "advanced_search": AdvancedSearch().create_search_interface(),
        "ai_assistant": AIAssistant().create_assistant_interface()
    }
    
    logger.info(f"{Colors.GREEN}‚úî –í—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.{Colors.RESET}")
    return widgets

# ==================== –¢–û–ß–ö–ê –í–•–û–î–ê ====================

if __name__ == "__main__":
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ ===")
    
    widgets = create_interactive_widgets()
    
    for name, widget in widgets.items():
        try:
            logger.info(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞: {name}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if hasattr(widget, 'create_uploader'):
                interface = widget.create_uploader()
            elif hasattr(widget, 'create_analyzer'):
                interface = widget.create_analyzer()
            elif hasattr(widget, 'create_comparison_widget'):
                interface = widget.create_comparison_widget()
            elif hasattr(widget, 'create_search_interface'):
                interface = widget.create_search_interface()
            elif hasattr(widget, 'create_assistant_interface'):
                interface = widget.create_assistant_interface()
            
            logger.info(f"–í–∏–¥–∂–µ—Ç {name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞ {name}: {e}")
    
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")
